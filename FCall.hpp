
#include <Windows.h>
#include <vector>

#undef NDEBUG
#include <assert.h>

#include "stream.hpp"

namespace FCall {

	const DWORD pushes[] = {
		0x69695773, 0x696990cc, 0x696954ee, 0x6969afdd, 0x6969d991, 0x6969091b, 0x6969d02b, 0x6969438e, 0x6969f7ca, 0x696964bc,
		0x696903bb, 0x6969dc50, 0x6969e3a5, 0x696979ce, 0x6969b7c2, 0x696971d1, 0x696918ee, 0x69697119, 0x6969afb3, 0x6969eccf,
		0x6969d881, 0x69690d1f, 0x69695bb4, 0x6969cc76, 0x6969e087, 0x696939d9, 0x6969df00, 0x69691f84, 0x69694e40, 0x696958a8,
		0x69691832, 0x69691d46, 0x69694803, 0x69692424, 0x6969c959, 0x69698a67, 0x6969eee2, 0x6969324b, 0x696937ba, 0x696956e1,
		0x6969b020, 0x69697f7c, 0x69697d8c, 0x69699166, 0x6969c314, 0x69690184, 0x6969daee, 0x69699de6, 0x69698223, 0x69695ee1,
		0x69690875, 0x696992a5, 0x6969ee60, 0x69691281, 0x696967c1, 0x69697bb3, 0x6969ef80, 0x69695cfe, 0x69696fd2, 0x696994af,
		0x69692f42, 0x69694a0a, 0x69696ed0, 0x69690096, 0x6969818d, 0x69690514, 0x696926fd, 0x6969741f, 0x6969a272, 0x6969c7b5,
		0x6969d52f, 0x6969ce7c, 0x69693cd3, 0x69690ffc, 0x69698f16, 0x6969429d, 0x69696550, 0x69692dfb, 0x69697ee4, 0x6969f05e,
		0x6969ecc8, 0x69692661, 0x6969f042, 0x69698d95, 0x69695f01, 0x69691e2d, 0x6969820d, 0x6969f93f, 0x6969f749, 0x6969f753,
		0x6969d51a, 0x6969d3d7, 0x6969787a, 0x69694bfe, 0x69699fa3, 0x69695b29, 0x6969a4c2, 0x69695bfd, 0x69694a0e, 0x6969ad6b,
		0x6969e392, 0x6969c928, 0x69692618, 0x69691c9e, 0x696974bf, 0x6969a5a1, 0x6969f3ee, 0x6969c7af, 0x6969eba6, 0x6969f12b,
		0x6969846a, 0x6969a36e, 0x69690e41, 0x69698592, 0x6969fd45, 0x6969fd58, 0x6969cfe5, 0x696915ef, 0x6969bfcb, 0x69692238,
		0x69698a5a, 0x696969d0, 0x6969cc23, 0x69692a09, 0x6969df8d, 0x6969771c, 0x6969f2fa, 0x696980d8, 0x6969dffc, 0x6969ebdb,
		0x6969686f, 0x6969e534, 0x6969c49e, 0x69698b9c, 0x6969d670, 0x69694e3f, 0x6969b818, 0x69695c9a, 0x6969a6b9, 0x696965ed,
		0x6969347f, 0x69690286, 0x696997be, 0x6969a3e2, 0x69699b4a, 0x6969f69e, 0x69694906, 0x69690c53, 0x6969fe28, 0x69697f83,
		0x69692586, 0x6969e409, 0x6969ce2b, 0x69699a61, 0x6969087c, 0x6969a3a6, 0x69692780, 0x6969f323, 0x696993d9, 0x69694cd9,
		0x69690ce3, 0x69693d9b, 0x6969e03c, 0x6969e2ff, 0x69690156, 0x6969a187, 0x6969394a, 0x6969b57f, 0x6969aeaa, 0x6969276a,
		0x69692e0e, 0x6969c296, 0x69693196, 0x6969d1b0, 0x6969fde3, 0x6969d45a, 0x69695f6e, 0x6969e2f3, 0x6969a11c, 0x6969a181,
		0x69691f4b, 0x696901a9, 0x6969157d, 0x69693a49, 0x6969a0f0, 0x6969dd4c, 0x6969f05d, 0x696944ae, 0x69697099, 0x6969f384,
		0x69692a91, 0x6969ed45, 0x6969f379, 0x69693b2e, 0x6969ce87, 0x696920fb, 0x6969cac9, 0x69697f19, 0x696905fb, 0x69693cb2,
		0x6969aa04, 0x69692520, 0x69694f13, 0x6969cca9, 0x6969bace, 0x69699e0f, 0x69694b76, 0x69699961, 0x69696a6d, 0x69693e05,
		0x6969431a, 0x6969d63d, 0x6969b4fb, 0x69694af7, 0x6969a03c, 0x6969b241, 0x6969cc45, 0x69695f65, 0x69694ae7, 0x6969ef08,
		0x69690f2e, 0x696989fb, 0x6969d4c9, 0x69695c1c, 0x69690d25, 0x6969e171, 0x69697c7e, 0x69695562, 0x6969c778, 0x6969f7e5,
		0x6969507f, 0x6969f026, 0x6969bf41, 0x69690655, 0x696932d5, 0x6969c1a4, 0x696968d6, 0x69693f66, 0x6969a0c0, 0x6969e809,
		0x69692e25, 0x696947cb, 0x6969b8c7, 0x6969e3ff, 0x6969696f, 0x696902e8, 0x696972b9, 0x69694f88, 0x6969088e, 0x6969e1c4,
		0x69697ec8, 0x69698a18, 0x6969f009, 0x69692e09, 0x6969ecd7, 0x6969881e, 0x69699ba5, 0x6969fb58, 0x6969bb58, 0x696927b5,
		0x69691d09, 0x69697cf5, 0x6969b24e, 0x6969e6ec, 0x6969d986, 0x69692769, 0x6969110f, 0x69696d0a, 0x696990ed, 0x6969174c,
		0x6969ff41, 0x6969ccb5, 0x696928bc, 0x69697bc5, 0x69697c61, 0x6969846d, 0x69691c32, 0x69693893, 0x69692e43, 0x696910bb,
		0x6969301b, 0x6969b46c, 0x6969c26e, 0x69691307, 0x6969c19e, 0x69694137, 0x696921e5, 0x6969fecc, 0x69694932, 0x69690088,
		0x6969a472, 0x6969132a, 0x6969b322, 0x6969f4d4, 0x696990cd, 0x6969f60c, 0x6969ad0f, 0x69696d36, 0x6969b9c3, 0x69690b07,
		0x69698181, 0x696954d1, 0x6969aac8, 0x69697de1, 0x6969e9b8, 0x696937a3, 0x6969cf7b, 0x69698913, 0x69695b48, 0x696954bb,
		0x6969ebbe, 0x69693f41, 0x6969c2c6, 0x69692183, 0x69692e2e, 0x6969362e, 0x6969bd3d, 0x69696a3c, 0x696970bc, 0x6969e41f,
		0x69694df3, 0x6969dbe9, 0x6969a968, 0x6969598c, 0x696962be, 0x696907a0, 0x69693602, 0x6969ab33, 0x6969e260, 0x6969a7ab,
		0x6969547b, 0x69692437, 0x6969d05a, 0x69693d24, 0x69692398, 0x696949e7, 0x6969720f, 0x6969b6ee, 0x696914a7, 0x6969ffe1,
		0x69695a26, 0x696924e9, 0x6969c44b, 0x69690fef, 0x6969433d, 0x6969fee0, 0x6969c36d, 0x696959b1, 0x6969a733, 0x69692af1,
		0x696999a2, 0x6969d4e2, 0x69697b24, 0x69693136, 0x6969eeb9, 0x6969de19, 0x69690db0, 0x6969a2b0, 0x69699214, 0x6969118f,
		0x6969480e, 0x69696244, 0x6969c2fe, 0x69695891, 0x69692d02, 0x6969c2be, 0x6969e5ac, 0x696931b3, 0x6969ce7f, 0x69695f66,
		0x696979c6, 0x69698c54, 0x69698cfc, 0x6969dac1, 0x696902c6, 0x6969028d, 0x6969a18f, 0x69693069, 0x69694789, 0x696974f1,
		0x69694dcc, 0x696913da, 0x6969518e, 0x6969c7ee, 0x69699bc0, 0x69699b07, 0x69690fe3, 0x69697a0f, 0x696934a8, 0x69695283,
		0x69698b21, 0x69696dfc, 0x6969f599, 0x696941ca, 0x69698d32, 0x69691841, 0x696963f9, 0x6969efb3, 0x696900ca, 0x6969873c,
		0x6969bb3f, 0x69694136, 0x6969a7ef, 0x696923d5, 0x69695791, 0x69698e79, 0x69698f40, 0x696978ab, 0x6969e2ce, 0x696948b3,
		0x69694575, 0x696919e1, 0x69693fc9, 0x69692b2c, 0x69697702, 0x6969665a, 0x696938b3, 0x69696593, 0x6969f2b6, 0x6969750d,
		0x6969aa95, 0x6969b176, 0x69691798, 0x69692ce1, 0x696959cc, 0x6969534d, 0x69692b16, 0x6969da47, 0x6969d0d6, 0x69697d0a,
		0x69695d62, 0x69690d92, 0x6969b4a3, 0x69699b2c, 0x6969e4bf, 0x6969b8dc, 0x69695387, 0x6969077d, 0x69699ce7, 0x696960d7,
		0x69692e60, 0x6969e098, 0x69699142, 0x696920dc, 0x69698606, 0x69690e3c, 0x6969c73c, 0x6969ef2d, 0x69691d32, 0x696964d5,
		0x696901a8, 0x6969d6d0, 0x69697ac3, 0x6969d996, 0x6969edb0, 0x6969e123, 0x69695122, 0x69699205, 0x6969890a, 0x69697719,
		0x696985b7, 0x696932f4, 0x6969e1fc, 0x6969e33c, 0x69690851, 0x69691d37, 0x6969e695, 0x69698fd5, 0x6969737e, 0x69696394,
		0x696966e6, 0x6969846e, 0x696969f7, 0x69696bdb, 0x69698185, 0x696910f7, 0x6969d41e, 0x6969242f, 0x6969a2f8, 0x69698bbe,
		0x69696d40, 0x69698150, 0x69691c12, 0x69690997, 0x6969c029, 0x696973ea, 0x69695cd3, 0x6969a494, 0x696951f3, 0x6969d646,
		0x696981b6, 0x696942c6, 0x6969b993, 0x69692a6f, 0x69698292, 0x69694fc6, 0x6969c79e, 0x6969db3a, 0x6969b4ac, 0x6969b4e6,
		0x696970b5, 0x6969484b, 0x69698360, 0x69698dce, 0x69698512, 0x6969737d, 0x69695b5e, 0x69697a8a, 0x6969304a, 0x6969883c,
		0x69696736, 0x69694a7a, 0x6969c193, 0x69698bab, 0x69698cb3, 0x696952ca, 0x6969273e, 0x6969a98b, 0x6969af57, 0x6969b060,
		0x6969a2d1, 0x6969a8d6, 0x6969cef1, 0x696945ea, 0x69693208, 0x696937e8, 0x6969dcad, 0x6969cc9d, 0x6969fb63, 0x6969785f,
		0x69696186, 0x69694045, 0x6969f796, 0x69696f75, 0x69690f97, 0x6969fe99, 0x6969fdb6, 0x6969264b, 0x6969920b, 0x69694800,
		0x696910a2, 0x6969087b, 0x69694195, 0x6969417f, 0x6969283c, 0x6969578e, 0x69698482, 0x69691d7d, 0x6969bd1e, 0x6969e77d,
		0x69699d94, 0x6969afaa, 0x6969fecd, 0x69691b43, 0x69692650, 0x69693d3a, 0x6969f176, 0x69696b1b, 0x69691ad0, 0x6969fae5,
		0x6969f486, 0x696910e8, 0x6969b916, 0x6969d4f0, 0x69698dd3, 0x696971c6, 0x6969b129, 0x69696ab4, 0x6969b6b2, 0x6969340e,
		0x69697846, 0x6969d41c, 0x696989ad, 0x69692604, 0x69699287, 0x6969c704, 0x6969ab64, 0x6969cef4, 0x6969089f, 0x69696d58,
		0x69696503, 0x6969a37a, 0x69693c62, 0x6969429e, 0x6969385f, 0x696957d7, 0x69694dd8, 0x69692ad1, 0x6969c91a, 0x69697229,
		0x6969c0c6, 0x69695239, 0x69696e8b, 0x696977b9, 0x69690b4b, 0x69695ffb, 0x69691996, 0x6969f4b9, 0x69696754, 0x6969d778,
		0x69697c8e, 0x69697920, 0x6969a1de, 0x69696542, 0x6969b397, 0x6969c588, 0x696930ec, 0x6969122d, 0x6969b6f1, 0x6969b7e0,
		0x696966a3, 0x6969de36, 0x6969fc86, 0x696916d5, 0x6969669a, 0x69692c35, 0x6969424e, 0x69695bfa, 0x6969356d, 0x69698ea5,
		0x6969763c, 0x69697b99, 0x6969557c, 0x6969d29f, 0x69691afc, 0x6969bbc0, 0x6969db31, 0x69698040, 0x69697429, 0x69692599,
		0x69695280, 0x69692719, 0x69693a16, 0x69694872, 0x696938d1, 0x69695b07, 0x6969c093, 0x6969cc6b, 0x696941f5, 0x69693328,
		0x6969ea8f, 0x69695e8d, 0x6969f303, 0x6969ca7c, 0x69699e5f, 0x69698f87, 0x6969b852, 0x6969196a, 0x69699e7c, 0x69698610,
		0x6969c8f1, 0x6969c57d, 0x69697a09, 0x69690c73, 0x69695b0a, 0x69694787, 0x6969c7a3, 0x6969901e, 0x69699784, 0x696945ec,
		0x696974cb, 0x69697b98, 0x6969da7a, 0x696928d7, 0x69694dbc, 0x6969cee1, 0x6969090d, 0x696965e8, 0x69698264, 0x69691186,
		0x69695269, 0x696904e0, 0x6969bba1, 0x696981ab, 0x696915ad, 0x69694143, 0x6969912b, 0x6969a1cd, 0x69690874, 0x6969f95b,
		0x69699bb4, 0x69690800, 0x6969be8d, 0x69696705, 0x696911f5, 0x69693bc0, 0x69699707, 0x6969a9bc, 0x69691955, 0x6969370c,
		0x6969d746, 0x6969e986, 0x6969cd6c, 0x69698823, 0x6969a52f, 0x69695d6c, 0x6969697c, 0x6969e36a, 0x6969bdd5, 0x6969c91c,
		0x69692fc1, 0x69691b1c, 0x6969aa70, 0x6969693f, 0x696945bd, 0x69694b6b, 0x69694361, 0x69691ac9, 0x69692689, 0x696912e9,
		0x6969ba00, 0x6969d4d2, 0x696948a4, 0x6969cd9e, 0x69698eff, 0x6969dfc7, 0x6969efa5, 0x69694061, 0x69698c75, 0x69692c6e,
		0x69697e57, 0x69693630, 0x69691d39, 0x69694281, 0x6969e7d1, 0x696967d1, 0x6969a0be, 0x69697e84, 0x69697d82, 0x696980a1,
		0x6969c6e5, 0x6969585d, 0x6969fdbb, 0x6969ad7d, 0x6969217f, 0x69698e9d, 0x6969415d, 0x6969b732, 0x6969f629, 0x69691b52,
		0x696976c6, 0x69697ddc, 0x6969a3a7, 0x6969f6d1, 0x6969b5e2, 0x696924c3, 0x6969c9b7, 0x6969e7f5, 0x696933d1, 0x6969c614,
		0x696991ed, 0x69690df7, 0x6969f62c, 0x6969c75b, 0x69690f93, 0x6969dd71, 0x69694ac7, 0x6969e0ab, 0x6969989d, 0x69690e27,
		0x6969442b, 0x6969d7d2, 0x6969e244, 0x6969da11, 0x69699269, 0x696941bd, 0x69695601, 0x6969ffb4, 0x6969758f, 0x6969ae65,
		0x696996fa, 0x6969f532, 0x69694eae, 0x69690346, 0x6969c910, 0x69691d1c, 0x69690526, 0x69693f67, 0x696925a4, 0x6969db7e,
		0x69699de4, 0x69693545, 0x69698e91, 0x6969ba9d, 0x6969b584, 0x696993d6, 0x69695684, 0x696924c6, 0x6969c916, 0x696935b3,
		0x6969454a, 0x69690299, 0x6969862b, 0x696924f0, 0x6969eae3, 0x69699a85, 0x69696155, 0x69694923, 0x6969de53, 0x696934c1,
		0x6969cd53, 0x696913a5, 0x696950b9, 0x6969e7bb, 0x69691074, 0x69693cac, 0x6969ed55, 0x6969cbee, 0x6969b787, 0x6969f6f1,
		0x6969ea4f, 0x6969112b, 0x6969928c, 0x69690e02, 0x6969126a, 0x6969e629, 0x69694598, 0x69696e97, 0x69694d84, 0x69694cfb,
		0x696936a0, 0x69696583, 0x6969f781, 0x696933f0, 0x6969719a, 0x6969928b, 0x6969de39, 0x6969fd03, 0x69692d77, 0x696976d8,
		0x6969027f, 0x6969fc22, 0x69699689, 0x69694510, 0x69690cb1, 0x6969076b, 0x6969bb71, 0x696952c4, 0x69695e7e, 0x6969948d,
		0x6969abcd, 0x6969d55e, 0x69690b2b, 0x69698f13, 0x6969b83f, 0x6969a816, 0x69694ff8, 0x696985a0, 0x6969056a, 0x696992d8,
		0x6969a024, 0x6969f2aa, 0x6969bf92, 0x69692237, 0x696973cd, 0x6969e0f2, 0x6969be16, 0x6969aa4a, 0x696934ef, 0x69694cd4,
		0x6969f7ba, 0x69698233, 0x6969c1ff, 0x6969a655, 0x6969d070, 0x69699a47, 0x6969f675, 0x69695a0e, 0x6969a745, 0x696902e0,
		0x69698a9b, 0x6969eb12, 0x69696cbf, 0x696929e8, 0x6969dd96, 0x696950e5, 0x69699501, 0x69693c7f, 0x69696cca, 0x6969bedc,
		0x69694e6f, 0x6969d173, 0x69693483, 0x6969d232, 0x6969abcc, 0x69690879, 0x6969e2a4, 0x696940b4, 0x696972e0, 0x6969c149,
		0x6969d06c, 0x69696805, 0x69699908, 0x69698547, 0x6969cff1, 0x69695cde, 0x69699da6, 0x69698ef3, 0x6969008e, 0x696997e9,
		0x6969da2e, 0x696984f3, 0x696976f6, 0x6969e625, 0x6969b58c, 0x69697c11, 0x69695645, 0x69697397, 0x69696915, 0x69693de3,
		0x69697b91, 0x6969dfb4, 0x6969c740, 0x696917e1, 0x69692b4c, 0x69693cb6, 0x6969c6d4, 0x6969b972, 0x6969c42e, 0x6969e379,
		0x696912bd, 0x6969f82e, 0x696900bb, 0x6969d5b0, 0x6969a937, 0x69690c61, 0x6969f915, 0x6969efbb, 0x69695fee, 0x69695ea3,
		0x6969419a, 0x6969d5e0, 0x69697c42, 0x6969bf4f, 0x6969f669, 0x696980f3, 0x6969c7c2, 0x6969ddef, 0x6969985d, 0x6969e989,
		0x69691653, 0x69695c8f, 0x6969e24f, 0x6969f96d, 0x6969a7e0, 0x69690d80, 0x6969ebc4, 0x696983f0, 0x69699cf3, 0x69694c06,
		0x6969afe3, 0x69695c2a, 0x69694eaa, 0x6969e942, 0x6969e102, 0x69697de8, 0x696924d6, 0x696966aa, 0x6969b937, 0x6969fb24,
		0x69692762, 0x6969825b, 0x6969cf10, 0x6969bc7f, 0x6969f2ee, 0x6969f5df, 0x6969a396, 0x6969fc18, 0x69693ad2, 0x6969987f,
		0x696926fb, 0x69693272, 0x6969ca0c, 0x6969e9f0, 0x696984c3, 0x6969aef3, 0x6969af78, 0x696920cd, 0x6969700c, 0x69694dff,
		0x6969d445, 0x6969c6d3, 0x696946c5, 0x696948d5, 0x6969c2b5, 0x69697d0d, 0x69693dcc, 0x6969c8e8, 0x6969f875, 0x6969a252,
		0x6969b2f2, 0x696974ad, 0x69691941, 0x69694579, 0x69696972, 0x69692371, 0x6969b725, 0x6969ce60, 0x6969f451, 0x69693bda
	};

	int getPushIndex(DWORD val) {
		if ((val >> 16) == 0x6969) {

			int count = sizeof(pushes) / sizeof(DWORD);
			for (int i = 0; i < count; i++) {
				if (pushes[i] == val) {
					return i;
				}
			}

		}
		return -1;
	}

	float callretfloat(LPVOID fnAddress) {

		typedef float fn(
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int
		);

		return ((fn*)fnAddress)(
			0x69695773, 0x696990cc, 0x696954ee, 0x6969afdd, 0x6969d991, 0x6969091b, 0x6969d02b, 0x6969438e, 0x6969f7ca, 0x696964bc,
			0x696903bb, 0x6969dc50, 0x6969e3a5, 0x696979ce, 0x6969b7c2, 0x696971d1, 0x696918ee, 0x69697119, 0x6969afb3, 0x6969eccf,
			0x6969d881, 0x69690d1f, 0x69695bb4, 0x6969cc76, 0x6969e087, 0x696939d9, 0x6969df00, 0x69691f84, 0x69694e40, 0x696958a8,
			0x69691832, 0x69691d46, 0x69694803, 0x69692424, 0x6969c959, 0x69698a67, 0x6969eee2, 0x6969324b, 0x696937ba, 0x696956e1,
			0x6969b020, 0x69697f7c, 0x69697d8c, 0x69699166, 0x6969c314, 0x69690184, 0x6969daee, 0x69699de6, 0x69698223, 0x69695ee1,
			0x69690875, 0x696992a5, 0x6969ee60, 0x69691281, 0x696967c1, 0x69697bb3, 0x6969ef80, 0x69695cfe, 0x69696fd2, 0x696994af,
			0x69692f42, 0x69694a0a, 0x69696ed0, 0x69690096, 0x6969818d, 0x69690514, 0x696926fd, 0x6969741f, 0x6969a272, 0x6969c7b5,
			0x6969d52f, 0x6969ce7c, 0x69693cd3, 0x69690ffc, 0x69698f16, 0x6969429d, 0x69696550, 0x69692dfb, 0x69697ee4, 0x6969f05e,
			0x6969ecc8, 0x69692661, 0x6969f042, 0x69698d95, 0x69695f01, 0x69691e2d, 0x6969820d, 0x6969f93f, 0x6969f749, 0x6969f753,
			0x6969d51a, 0x6969d3d7, 0x6969787a, 0x69694bfe, 0x69699fa3, 0x69695b29, 0x6969a4c2, 0x69695bfd, 0x69694a0e, 0x6969ad6b,
			0x6969e392, 0x6969c928, 0x69692618, 0x69691c9e, 0x696974bf, 0x6969a5a1, 0x6969f3ee, 0x6969c7af, 0x6969eba6, 0x6969f12b,
			0x6969846a, 0x6969a36e, 0x69690e41, 0x69698592, 0x6969fd45, 0x6969fd58, 0x6969cfe5, 0x696915ef, 0x6969bfcb, 0x69692238,
			0x69698a5a, 0x696969d0, 0x6969cc23, 0x69692a09, 0x6969df8d, 0x6969771c, 0x6969f2fa, 0x696980d8, 0x6969dffc, 0x6969ebdb,
			0x6969686f, 0x6969e534, 0x6969c49e, 0x69698b9c, 0x6969d670, 0x69694e3f, 0x6969b818, 0x69695c9a, 0x6969a6b9, 0x696965ed,
			0x6969347f, 0x69690286, 0x696997be, 0x6969a3e2, 0x69699b4a, 0x6969f69e, 0x69694906, 0x69690c53, 0x6969fe28, 0x69697f83,
			0x69692586, 0x6969e409, 0x6969ce2b, 0x69699a61, 0x6969087c, 0x6969a3a6, 0x69692780, 0x6969f323, 0x696993d9, 0x69694cd9,
			0x69690ce3, 0x69693d9b, 0x6969e03c, 0x6969e2ff, 0x69690156, 0x6969a187, 0x6969394a, 0x6969b57f, 0x6969aeaa, 0x6969276a,
			0x69692e0e, 0x6969c296, 0x69693196, 0x6969d1b0, 0x6969fde3, 0x6969d45a, 0x69695f6e, 0x6969e2f3, 0x6969a11c, 0x6969a181,
			0x69691f4b, 0x696901a9, 0x6969157d, 0x69693a49, 0x6969a0f0, 0x6969dd4c, 0x6969f05d, 0x696944ae, 0x69697099, 0x6969f384,
			0x69692a91, 0x6969ed45, 0x6969f379, 0x69693b2e, 0x6969ce87, 0x696920fb, 0x6969cac9, 0x69697f19, 0x696905fb, 0x69693cb2,
			0x6969aa04, 0x69692520, 0x69694f13, 0x6969cca9, 0x6969bace, 0x69699e0f, 0x69694b76, 0x69699961, 0x69696a6d, 0x69693e05,
			0x6969431a, 0x6969d63d, 0x6969b4fb, 0x69694af7, 0x6969a03c, 0x6969b241, 0x6969cc45, 0x69695f65, 0x69694ae7, 0x6969ef08,
			0x69690f2e, 0x696989fb, 0x6969d4c9, 0x69695c1c, 0x69690d25, 0x6969e171, 0x69697c7e, 0x69695562, 0x6969c778, 0x6969f7e5,
			0x6969507f, 0x6969f026, 0x6969bf41, 0x69690655, 0x696932d5, 0x6969c1a4, 0x696968d6, 0x69693f66, 0x6969a0c0, 0x6969e809,
			0x69692e25, 0x696947cb, 0x6969b8c7, 0x6969e3ff, 0x6969696f, 0x696902e8, 0x696972b9, 0x69694f88, 0x6969088e, 0x6969e1c4,
			0x69697ec8, 0x69698a18, 0x6969f009, 0x69692e09, 0x6969ecd7, 0x6969881e, 0x69699ba5, 0x6969fb58, 0x6969bb58, 0x696927b5,
			0x69691d09, 0x69697cf5, 0x6969b24e, 0x6969e6ec, 0x6969d986, 0x69692769, 0x6969110f, 0x69696d0a, 0x696990ed, 0x6969174c,
			0x6969ff41, 0x6969ccb5, 0x696928bc, 0x69697bc5, 0x69697c61, 0x6969846d, 0x69691c32, 0x69693893, 0x69692e43, 0x696910bb,
			0x6969301b, 0x6969b46c, 0x6969c26e, 0x69691307, 0x6969c19e, 0x69694137, 0x696921e5, 0x6969fecc, 0x69694932, 0x69690088,
			0x6969a472, 0x6969132a, 0x6969b322, 0x6969f4d4, 0x696990cd, 0x6969f60c, 0x6969ad0f, 0x69696d36, 0x6969b9c3, 0x69690b07,
			0x69698181, 0x696954d1, 0x6969aac8, 0x69697de1, 0x6969e9b8, 0x696937a3, 0x6969cf7b, 0x69698913, 0x69695b48, 0x696954bb,
			0x6969ebbe, 0x69693f41, 0x6969c2c6, 0x69692183, 0x69692e2e, 0x6969362e, 0x6969bd3d, 0x69696a3c, 0x696970bc, 0x6969e41f,
			0x69694df3, 0x6969dbe9, 0x6969a968, 0x6969598c, 0x696962be, 0x696907a0, 0x69693602, 0x6969ab33, 0x6969e260, 0x6969a7ab,
			0x6969547b, 0x69692437, 0x6969d05a, 0x69693d24, 0x69692398, 0x696949e7, 0x6969720f, 0x6969b6ee, 0x696914a7, 0x6969ffe1,
			0x69695a26, 0x696924e9, 0x6969c44b, 0x69690fef, 0x6969433d, 0x6969fee0, 0x6969c36d, 0x696959b1, 0x6969a733, 0x69692af1,
			0x696999a2, 0x6969d4e2, 0x69697b24, 0x69693136, 0x6969eeb9, 0x6969de19, 0x69690db0, 0x6969a2b0, 0x69699214, 0x6969118f,
			0x6969480e, 0x69696244, 0x6969c2fe, 0x69695891, 0x69692d02, 0x6969c2be, 0x6969e5ac, 0x696931b3, 0x6969ce7f, 0x69695f66,
			0x696979c6, 0x69698c54, 0x69698cfc, 0x6969dac1, 0x696902c6, 0x6969028d, 0x6969a18f, 0x69693069, 0x69694789, 0x696974f1,
			0x69694dcc, 0x696913da, 0x6969518e, 0x6969c7ee, 0x69699bc0, 0x69699b07, 0x69690fe3, 0x69697a0f, 0x696934a8, 0x69695283,
			0x69698b21, 0x69696dfc, 0x6969f599, 0x696941ca, 0x69698d32, 0x69691841, 0x696963f9, 0x6969efb3, 0x696900ca, 0x6969873c,
			0x6969bb3f, 0x69694136, 0x6969a7ef, 0x696923d5, 0x69695791, 0x69698e79, 0x69698f40, 0x696978ab, 0x6969e2ce, 0x696948b3,
			0x69694575, 0x696919e1, 0x69693fc9, 0x69692b2c, 0x69697702, 0x6969665a, 0x696938b3, 0x69696593, 0x6969f2b6, 0x6969750d,
			0x6969aa95, 0x6969b176, 0x69691798, 0x69692ce1, 0x696959cc, 0x6969534d, 0x69692b16, 0x6969da47, 0x6969d0d6, 0x69697d0a,
			0x69695d62, 0x69690d92, 0x6969b4a3, 0x69699b2c, 0x6969e4bf, 0x6969b8dc, 0x69695387, 0x6969077d, 0x69699ce7, 0x696960d7,
			0x69692e60, 0x6969e098, 0x69699142, 0x696920dc, 0x69698606, 0x69690e3c, 0x6969c73c, 0x6969ef2d, 0x69691d32, 0x696964d5,
			0x696901a8, 0x6969d6d0, 0x69697ac3, 0x6969d996, 0x6969edb0, 0x6969e123, 0x69695122, 0x69699205, 0x6969890a, 0x69697719,
			0x696985b7, 0x696932f4, 0x6969e1fc, 0x6969e33c, 0x69690851, 0x69691d37, 0x6969e695, 0x69698fd5, 0x6969737e, 0x69696394,
			0x696966e6, 0x6969846e, 0x696969f7, 0x69696bdb, 0x69698185, 0x696910f7, 0x6969d41e, 0x6969242f, 0x6969a2f8, 0x69698bbe,
			0x69696d40, 0x69698150, 0x69691c12, 0x69690997, 0x6969c029, 0x696973ea, 0x69695cd3, 0x6969a494, 0x696951f3, 0x6969d646,
			0x696981b6, 0x696942c6, 0x6969b993, 0x69692a6f, 0x69698292, 0x69694fc6, 0x6969c79e, 0x6969db3a, 0x6969b4ac, 0x6969b4e6,
			0x696970b5, 0x6969484b, 0x69698360, 0x69698dce, 0x69698512, 0x6969737d, 0x69695b5e, 0x69697a8a, 0x6969304a, 0x6969883c,
			0x69696736, 0x69694a7a, 0x6969c193, 0x69698bab, 0x69698cb3, 0x696952ca, 0x6969273e, 0x6969a98b, 0x6969af57, 0x6969b060,
			0x6969a2d1, 0x6969a8d6, 0x6969cef1, 0x696945ea, 0x69693208, 0x696937e8, 0x6969dcad, 0x6969cc9d, 0x6969fb63, 0x6969785f,
			0x69696186, 0x69694045, 0x6969f796, 0x69696f75, 0x69690f97, 0x6969fe99, 0x6969fdb6, 0x6969264b, 0x6969920b, 0x69694800,
			0x696910a2, 0x6969087b, 0x69694195, 0x6969417f, 0x6969283c, 0x6969578e, 0x69698482, 0x69691d7d, 0x6969bd1e, 0x6969e77d,
			0x69699d94, 0x6969afaa, 0x6969fecd, 0x69691b43, 0x69692650, 0x69693d3a, 0x6969f176, 0x69696b1b, 0x69691ad0, 0x6969fae5,
			0x6969f486, 0x696910e8, 0x6969b916, 0x6969d4f0, 0x69698dd3, 0x696971c6, 0x6969b129, 0x69696ab4, 0x6969b6b2, 0x6969340e,
			0x69697846, 0x6969d41c, 0x696989ad, 0x69692604, 0x69699287, 0x6969c704, 0x6969ab64, 0x6969cef4, 0x6969089f, 0x69696d58,
			0x69696503, 0x6969a37a, 0x69693c62, 0x6969429e, 0x6969385f, 0x696957d7, 0x69694dd8, 0x69692ad1, 0x6969c91a, 0x69697229,
			0x6969c0c6, 0x69695239, 0x69696e8b, 0x696977b9, 0x69690b4b, 0x69695ffb, 0x69691996, 0x6969f4b9, 0x69696754, 0x6969d778,
			0x69697c8e, 0x69697920, 0x6969a1de, 0x69696542, 0x6969b397, 0x6969c588, 0x696930ec, 0x6969122d, 0x6969b6f1, 0x6969b7e0,
			0x696966a3, 0x6969de36, 0x6969fc86, 0x696916d5, 0x6969669a, 0x69692c35, 0x6969424e, 0x69695bfa, 0x6969356d, 0x69698ea5,
			0x6969763c, 0x69697b99, 0x6969557c, 0x6969d29f, 0x69691afc, 0x6969bbc0, 0x6969db31, 0x69698040, 0x69697429, 0x69692599,
			0x69695280, 0x69692719, 0x69693a16, 0x69694872, 0x696938d1, 0x69695b07, 0x6969c093, 0x6969cc6b, 0x696941f5, 0x69693328,
			0x6969ea8f, 0x69695e8d, 0x6969f303, 0x6969ca7c, 0x69699e5f, 0x69698f87, 0x6969b852, 0x6969196a, 0x69699e7c, 0x69698610,
			0x6969c8f1, 0x6969c57d, 0x69697a09, 0x69690c73, 0x69695b0a, 0x69694787, 0x6969c7a3, 0x6969901e, 0x69699784, 0x696945ec,
			0x696974cb, 0x69697b98, 0x6969da7a, 0x696928d7, 0x69694dbc, 0x6969cee1, 0x6969090d, 0x696965e8, 0x69698264, 0x69691186,
			0x69695269, 0x696904e0, 0x6969bba1, 0x696981ab, 0x696915ad, 0x69694143, 0x6969912b, 0x6969a1cd, 0x69690874, 0x6969f95b,
			0x69699bb4, 0x69690800, 0x6969be8d, 0x69696705, 0x696911f5, 0x69693bc0, 0x69699707, 0x6969a9bc, 0x69691955, 0x6969370c,
			0x6969d746, 0x6969e986, 0x6969cd6c, 0x69698823, 0x6969a52f, 0x69695d6c, 0x6969697c, 0x6969e36a, 0x6969bdd5, 0x6969c91c,
			0x69692fc1, 0x69691b1c, 0x6969aa70, 0x6969693f, 0x696945bd, 0x69694b6b, 0x69694361, 0x69691ac9, 0x69692689, 0x696912e9,
			0x6969ba00, 0x6969d4d2, 0x696948a4, 0x6969cd9e, 0x69698eff, 0x6969dfc7, 0x6969efa5, 0x69694061, 0x69698c75, 0x69692c6e,
			0x69697e57, 0x69693630, 0x69691d39, 0x69694281, 0x6969e7d1, 0x696967d1, 0x6969a0be, 0x69697e84, 0x69697d82, 0x696980a1,
			0x6969c6e5, 0x6969585d, 0x6969fdbb, 0x6969ad7d, 0x6969217f, 0x69698e9d, 0x6969415d, 0x6969b732, 0x6969f629, 0x69691b52,
			0x696976c6, 0x69697ddc, 0x6969a3a7, 0x6969f6d1, 0x6969b5e2, 0x696924c3, 0x6969c9b7, 0x6969e7f5, 0x696933d1, 0x6969c614,
			0x696991ed, 0x69690df7, 0x6969f62c, 0x6969c75b, 0x69690f93, 0x6969dd71, 0x69694ac7, 0x6969e0ab, 0x6969989d, 0x69690e27,
			0x6969442b, 0x6969d7d2, 0x6969e244, 0x6969da11, 0x69699269, 0x696941bd, 0x69695601, 0x6969ffb4, 0x6969758f, 0x6969ae65,
			0x696996fa, 0x6969f532, 0x69694eae, 0x69690346, 0x6969c910, 0x69691d1c, 0x69690526, 0x69693f67, 0x696925a4, 0x6969db7e,
			0x69699de4, 0x69693545, 0x69698e91, 0x6969ba9d, 0x6969b584, 0x696993d6, 0x69695684, 0x696924c6, 0x6969c916, 0x696935b3,
			0x6969454a, 0x69690299, 0x6969862b, 0x696924f0, 0x6969eae3, 0x69699a85, 0x69696155, 0x69694923, 0x6969de53, 0x696934c1,
			0x6969cd53, 0x696913a5, 0x696950b9, 0x6969e7bb, 0x69691074, 0x69693cac, 0x6969ed55, 0x6969cbee, 0x6969b787, 0x6969f6f1,
			0x6969ea4f, 0x6969112b, 0x6969928c, 0x69690e02, 0x6969126a, 0x6969e629, 0x69694598, 0x69696e97, 0x69694d84, 0x69694cfb,
			0x696936a0, 0x69696583, 0x6969f781, 0x696933f0, 0x6969719a, 0x6969928b, 0x6969de39, 0x6969fd03, 0x69692d77, 0x696976d8,
			0x6969027f, 0x6969fc22, 0x69699689, 0x69694510, 0x69690cb1, 0x6969076b, 0x6969bb71, 0x696952c4, 0x69695e7e, 0x6969948d,
			0x6969abcd, 0x6969d55e, 0x69690b2b, 0x69698f13, 0x6969b83f, 0x6969a816, 0x69694ff8, 0x696985a0, 0x6969056a, 0x696992d8,
			0x6969a024, 0x6969f2aa, 0x6969bf92, 0x69692237, 0x696973cd, 0x6969e0f2, 0x6969be16, 0x6969aa4a, 0x696934ef, 0x69694cd4,
			0x6969f7ba, 0x69698233, 0x6969c1ff, 0x6969a655, 0x6969d070, 0x69699a47, 0x6969f675, 0x69695a0e, 0x6969a745, 0x696902e0,
			0x69698a9b, 0x6969eb12, 0x69696cbf, 0x696929e8, 0x6969dd96, 0x696950e5, 0x69699501, 0x69693c7f, 0x69696cca, 0x6969bedc,
			0x69694e6f, 0x6969d173, 0x69693483, 0x6969d232, 0x6969abcc, 0x69690879, 0x6969e2a4, 0x696940b4, 0x696972e0, 0x6969c149,
			0x6969d06c, 0x69696805, 0x69699908, 0x69698547, 0x6969cff1, 0x69695cde, 0x69699da6, 0x69698ef3, 0x6969008e, 0x696997e9,
			0x6969da2e, 0x696984f3, 0x696976f6, 0x6969e625, 0x6969b58c, 0x69697c11, 0x69695645, 0x69697397, 0x69696915, 0x69693de3,
			0x69697b91, 0x6969dfb4, 0x6969c740, 0x696917e1, 0x69692b4c, 0x69693cb6, 0x6969c6d4, 0x6969b972, 0x6969c42e, 0x6969e379,
			0x696912bd, 0x6969f82e, 0x696900bb, 0x6969d5b0, 0x6969a937, 0x69690c61, 0x6969f915, 0x6969efbb, 0x69695fee, 0x69695ea3,
			0x6969419a, 0x6969d5e0, 0x69697c42, 0x6969bf4f, 0x6969f669, 0x696980f3, 0x6969c7c2, 0x6969ddef, 0x6969985d, 0x6969e989,
			0x69691653, 0x69695c8f, 0x6969e24f, 0x6969f96d, 0x6969a7e0, 0x69690d80, 0x6969ebc4, 0x696983f0, 0x69699cf3, 0x69694c06,
			0x6969afe3, 0x69695c2a, 0x69694eaa, 0x6969e942, 0x6969e102, 0x69697de8, 0x696924d6, 0x696966aa, 0x6969b937, 0x6969fb24,
			0x69692762, 0x6969825b, 0x6969cf10, 0x6969bc7f, 0x6969f2ee, 0x6969f5df, 0x6969a396, 0x6969fc18, 0x69693ad2, 0x6969987f,
			0x696926fb, 0x69693272, 0x6969ca0c, 0x6969e9f0, 0x696984c3, 0x6969aef3, 0x6969af78, 0x696920cd, 0x6969700c, 0x69694dff,
			0x6969d445, 0x6969c6d3, 0x696946c5, 0x696948d5, 0x6969c2b5, 0x69697d0d, 0x69693dcc, 0x6969c8e8, 0x6969f875, 0x6969a252,
			0x6969b2f2, 0x696974ad, 0x69691941, 0x69694579, 0x69696972, 0x69692371, 0x6969b725, 0x6969ce60, 0x6969f451, 0x69693bda
			);
	}
	
	double callretdouble(LPVOID fnAddress) {

		typedef double fn(
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int
		);

		return ((fn*)fnAddress)(
			0x69695773, 0x696990cc, 0x696954ee, 0x6969afdd, 0x6969d991, 0x6969091b, 0x6969d02b, 0x6969438e, 0x6969f7ca, 0x696964bc,
			0x696903bb, 0x6969dc50, 0x6969e3a5, 0x696979ce, 0x6969b7c2, 0x696971d1, 0x696918ee, 0x69697119, 0x6969afb3, 0x6969eccf,
			0x6969d881, 0x69690d1f, 0x69695bb4, 0x6969cc76, 0x6969e087, 0x696939d9, 0x6969df00, 0x69691f84, 0x69694e40, 0x696958a8,
			0x69691832, 0x69691d46, 0x69694803, 0x69692424, 0x6969c959, 0x69698a67, 0x6969eee2, 0x6969324b, 0x696937ba, 0x696956e1,
			0x6969b020, 0x69697f7c, 0x69697d8c, 0x69699166, 0x6969c314, 0x69690184, 0x6969daee, 0x69699de6, 0x69698223, 0x69695ee1,
			0x69690875, 0x696992a5, 0x6969ee60, 0x69691281, 0x696967c1, 0x69697bb3, 0x6969ef80, 0x69695cfe, 0x69696fd2, 0x696994af,
			0x69692f42, 0x69694a0a, 0x69696ed0, 0x69690096, 0x6969818d, 0x69690514, 0x696926fd, 0x6969741f, 0x6969a272, 0x6969c7b5,
			0x6969d52f, 0x6969ce7c, 0x69693cd3, 0x69690ffc, 0x69698f16, 0x6969429d, 0x69696550, 0x69692dfb, 0x69697ee4, 0x6969f05e,
			0x6969ecc8, 0x69692661, 0x6969f042, 0x69698d95, 0x69695f01, 0x69691e2d, 0x6969820d, 0x6969f93f, 0x6969f749, 0x6969f753,
			0x6969d51a, 0x6969d3d7, 0x6969787a, 0x69694bfe, 0x69699fa3, 0x69695b29, 0x6969a4c2, 0x69695bfd, 0x69694a0e, 0x6969ad6b,
			0x6969e392, 0x6969c928, 0x69692618, 0x69691c9e, 0x696974bf, 0x6969a5a1, 0x6969f3ee, 0x6969c7af, 0x6969eba6, 0x6969f12b,
			0x6969846a, 0x6969a36e, 0x69690e41, 0x69698592, 0x6969fd45, 0x6969fd58, 0x6969cfe5, 0x696915ef, 0x6969bfcb, 0x69692238,
			0x69698a5a, 0x696969d0, 0x6969cc23, 0x69692a09, 0x6969df8d, 0x6969771c, 0x6969f2fa, 0x696980d8, 0x6969dffc, 0x6969ebdb,
			0x6969686f, 0x6969e534, 0x6969c49e, 0x69698b9c, 0x6969d670, 0x69694e3f, 0x6969b818, 0x69695c9a, 0x6969a6b9, 0x696965ed,
			0x6969347f, 0x69690286, 0x696997be, 0x6969a3e2, 0x69699b4a, 0x6969f69e, 0x69694906, 0x69690c53, 0x6969fe28, 0x69697f83,
			0x69692586, 0x6969e409, 0x6969ce2b, 0x69699a61, 0x6969087c, 0x6969a3a6, 0x69692780, 0x6969f323, 0x696993d9, 0x69694cd9,
			0x69690ce3, 0x69693d9b, 0x6969e03c, 0x6969e2ff, 0x69690156, 0x6969a187, 0x6969394a, 0x6969b57f, 0x6969aeaa, 0x6969276a,
			0x69692e0e, 0x6969c296, 0x69693196, 0x6969d1b0, 0x6969fde3, 0x6969d45a, 0x69695f6e, 0x6969e2f3, 0x6969a11c, 0x6969a181,
			0x69691f4b, 0x696901a9, 0x6969157d, 0x69693a49, 0x6969a0f0, 0x6969dd4c, 0x6969f05d, 0x696944ae, 0x69697099, 0x6969f384,
			0x69692a91, 0x6969ed45, 0x6969f379, 0x69693b2e, 0x6969ce87, 0x696920fb, 0x6969cac9, 0x69697f19, 0x696905fb, 0x69693cb2,
			0x6969aa04, 0x69692520, 0x69694f13, 0x6969cca9, 0x6969bace, 0x69699e0f, 0x69694b76, 0x69699961, 0x69696a6d, 0x69693e05,
			0x6969431a, 0x6969d63d, 0x6969b4fb, 0x69694af7, 0x6969a03c, 0x6969b241, 0x6969cc45, 0x69695f65, 0x69694ae7, 0x6969ef08,
			0x69690f2e, 0x696989fb, 0x6969d4c9, 0x69695c1c, 0x69690d25, 0x6969e171, 0x69697c7e, 0x69695562, 0x6969c778, 0x6969f7e5,
			0x6969507f, 0x6969f026, 0x6969bf41, 0x69690655, 0x696932d5, 0x6969c1a4, 0x696968d6, 0x69693f66, 0x6969a0c0, 0x6969e809,
			0x69692e25, 0x696947cb, 0x6969b8c7, 0x6969e3ff, 0x6969696f, 0x696902e8, 0x696972b9, 0x69694f88, 0x6969088e, 0x6969e1c4,
			0x69697ec8, 0x69698a18, 0x6969f009, 0x69692e09, 0x6969ecd7, 0x6969881e, 0x69699ba5, 0x6969fb58, 0x6969bb58, 0x696927b5,
			0x69691d09, 0x69697cf5, 0x6969b24e, 0x6969e6ec, 0x6969d986, 0x69692769, 0x6969110f, 0x69696d0a, 0x696990ed, 0x6969174c,
			0x6969ff41, 0x6969ccb5, 0x696928bc, 0x69697bc5, 0x69697c61, 0x6969846d, 0x69691c32, 0x69693893, 0x69692e43, 0x696910bb,
			0x6969301b, 0x6969b46c, 0x6969c26e, 0x69691307, 0x6969c19e, 0x69694137, 0x696921e5, 0x6969fecc, 0x69694932, 0x69690088,
			0x6969a472, 0x6969132a, 0x6969b322, 0x6969f4d4, 0x696990cd, 0x6969f60c, 0x6969ad0f, 0x69696d36, 0x6969b9c3, 0x69690b07,
			0x69698181, 0x696954d1, 0x6969aac8, 0x69697de1, 0x6969e9b8, 0x696937a3, 0x6969cf7b, 0x69698913, 0x69695b48, 0x696954bb,
			0x6969ebbe, 0x69693f41, 0x6969c2c6, 0x69692183, 0x69692e2e, 0x6969362e, 0x6969bd3d, 0x69696a3c, 0x696970bc, 0x6969e41f,
			0x69694df3, 0x6969dbe9, 0x6969a968, 0x6969598c, 0x696962be, 0x696907a0, 0x69693602, 0x6969ab33, 0x6969e260, 0x6969a7ab,
			0x6969547b, 0x69692437, 0x6969d05a, 0x69693d24, 0x69692398, 0x696949e7, 0x6969720f, 0x6969b6ee, 0x696914a7, 0x6969ffe1,
			0x69695a26, 0x696924e9, 0x6969c44b, 0x69690fef, 0x6969433d, 0x6969fee0, 0x6969c36d, 0x696959b1, 0x6969a733, 0x69692af1,
			0x696999a2, 0x6969d4e2, 0x69697b24, 0x69693136, 0x6969eeb9, 0x6969de19, 0x69690db0, 0x6969a2b0, 0x69699214, 0x6969118f,
			0x6969480e, 0x69696244, 0x6969c2fe, 0x69695891, 0x69692d02, 0x6969c2be, 0x6969e5ac, 0x696931b3, 0x6969ce7f, 0x69695f66,
			0x696979c6, 0x69698c54, 0x69698cfc, 0x6969dac1, 0x696902c6, 0x6969028d, 0x6969a18f, 0x69693069, 0x69694789, 0x696974f1,
			0x69694dcc, 0x696913da, 0x6969518e, 0x6969c7ee, 0x69699bc0, 0x69699b07, 0x69690fe3, 0x69697a0f, 0x696934a8, 0x69695283,
			0x69698b21, 0x69696dfc, 0x6969f599, 0x696941ca, 0x69698d32, 0x69691841, 0x696963f9, 0x6969efb3, 0x696900ca, 0x6969873c,
			0x6969bb3f, 0x69694136, 0x6969a7ef, 0x696923d5, 0x69695791, 0x69698e79, 0x69698f40, 0x696978ab, 0x6969e2ce, 0x696948b3,
			0x69694575, 0x696919e1, 0x69693fc9, 0x69692b2c, 0x69697702, 0x6969665a, 0x696938b3, 0x69696593, 0x6969f2b6, 0x6969750d,
			0x6969aa95, 0x6969b176, 0x69691798, 0x69692ce1, 0x696959cc, 0x6969534d, 0x69692b16, 0x6969da47, 0x6969d0d6, 0x69697d0a,
			0x69695d62, 0x69690d92, 0x6969b4a3, 0x69699b2c, 0x6969e4bf, 0x6969b8dc, 0x69695387, 0x6969077d, 0x69699ce7, 0x696960d7,
			0x69692e60, 0x6969e098, 0x69699142, 0x696920dc, 0x69698606, 0x69690e3c, 0x6969c73c, 0x6969ef2d, 0x69691d32, 0x696964d5,
			0x696901a8, 0x6969d6d0, 0x69697ac3, 0x6969d996, 0x6969edb0, 0x6969e123, 0x69695122, 0x69699205, 0x6969890a, 0x69697719,
			0x696985b7, 0x696932f4, 0x6969e1fc, 0x6969e33c, 0x69690851, 0x69691d37, 0x6969e695, 0x69698fd5, 0x6969737e, 0x69696394,
			0x696966e6, 0x6969846e, 0x696969f7, 0x69696bdb, 0x69698185, 0x696910f7, 0x6969d41e, 0x6969242f, 0x6969a2f8, 0x69698bbe,
			0x69696d40, 0x69698150, 0x69691c12, 0x69690997, 0x6969c029, 0x696973ea, 0x69695cd3, 0x6969a494, 0x696951f3, 0x6969d646,
			0x696981b6, 0x696942c6, 0x6969b993, 0x69692a6f, 0x69698292, 0x69694fc6, 0x6969c79e, 0x6969db3a, 0x6969b4ac, 0x6969b4e6,
			0x696970b5, 0x6969484b, 0x69698360, 0x69698dce, 0x69698512, 0x6969737d, 0x69695b5e, 0x69697a8a, 0x6969304a, 0x6969883c,
			0x69696736, 0x69694a7a, 0x6969c193, 0x69698bab, 0x69698cb3, 0x696952ca, 0x6969273e, 0x6969a98b, 0x6969af57, 0x6969b060,
			0x6969a2d1, 0x6969a8d6, 0x6969cef1, 0x696945ea, 0x69693208, 0x696937e8, 0x6969dcad, 0x6969cc9d, 0x6969fb63, 0x6969785f,
			0x69696186, 0x69694045, 0x6969f796, 0x69696f75, 0x69690f97, 0x6969fe99, 0x6969fdb6, 0x6969264b, 0x6969920b, 0x69694800,
			0x696910a2, 0x6969087b, 0x69694195, 0x6969417f, 0x6969283c, 0x6969578e, 0x69698482, 0x69691d7d, 0x6969bd1e, 0x6969e77d,
			0x69699d94, 0x6969afaa, 0x6969fecd, 0x69691b43, 0x69692650, 0x69693d3a, 0x6969f176, 0x69696b1b, 0x69691ad0, 0x6969fae5,
			0x6969f486, 0x696910e8, 0x6969b916, 0x6969d4f0, 0x69698dd3, 0x696971c6, 0x6969b129, 0x69696ab4, 0x6969b6b2, 0x6969340e,
			0x69697846, 0x6969d41c, 0x696989ad, 0x69692604, 0x69699287, 0x6969c704, 0x6969ab64, 0x6969cef4, 0x6969089f, 0x69696d58,
			0x69696503, 0x6969a37a, 0x69693c62, 0x6969429e, 0x6969385f, 0x696957d7, 0x69694dd8, 0x69692ad1, 0x6969c91a, 0x69697229,
			0x6969c0c6, 0x69695239, 0x69696e8b, 0x696977b9, 0x69690b4b, 0x69695ffb, 0x69691996, 0x6969f4b9, 0x69696754, 0x6969d778,
			0x69697c8e, 0x69697920, 0x6969a1de, 0x69696542, 0x6969b397, 0x6969c588, 0x696930ec, 0x6969122d, 0x6969b6f1, 0x6969b7e0,
			0x696966a3, 0x6969de36, 0x6969fc86, 0x696916d5, 0x6969669a, 0x69692c35, 0x6969424e, 0x69695bfa, 0x6969356d, 0x69698ea5,
			0x6969763c, 0x69697b99, 0x6969557c, 0x6969d29f, 0x69691afc, 0x6969bbc0, 0x6969db31, 0x69698040, 0x69697429, 0x69692599,
			0x69695280, 0x69692719, 0x69693a16, 0x69694872, 0x696938d1, 0x69695b07, 0x6969c093, 0x6969cc6b, 0x696941f5, 0x69693328,
			0x6969ea8f, 0x69695e8d, 0x6969f303, 0x6969ca7c, 0x69699e5f, 0x69698f87, 0x6969b852, 0x6969196a, 0x69699e7c, 0x69698610,
			0x6969c8f1, 0x6969c57d, 0x69697a09, 0x69690c73, 0x69695b0a, 0x69694787, 0x6969c7a3, 0x6969901e, 0x69699784, 0x696945ec,
			0x696974cb, 0x69697b98, 0x6969da7a, 0x696928d7, 0x69694dbc, 0x6969cee1, 0x6969090d, 0x696965e8, 0x69698264, 0x69691186,
			0x69695269, 0x696904e0, 0x6969bba1, 0x696981ab, 0x696915ad, 0x69694143, 0x6969912b, 0x6969a1cd, 0x69690874, 0x6969f95b,
			0x69699bb4, 0x69690800, 0x6969be8d, 0x69696705, 0x696911f5, 0x69693bc0, 0x69699707, 0x6969a9bc, 0x69691955, 0x6969370c,
			0x6969d746, 0x6969e986, 0x6969cd6c, 0x69698823, 0x6969a52f, 0x69695d6c, 0x6969697c, 0x6969e36a, 0x6969bdd5, 0x6969c91c,
			0x69692fc1, 0x69691b1c, 0x6969aa70, 0x6969693f, 0x696945bd, 0x69694b6b, 0x69694361, 0x69691ac9, 0x69692689, 0x696912e9,
			0x6969ba00, 0x6969d4d2, 0x696948a4, 0x6969cd9e, 0x69698eff, 0x6969dfc7, 0x6969efa5, 0x69694061, 0x69698c75, 0x69692c6e,
			0x69697e57, 0x69693630, 0x69691d39, 0x69694281, 0x6969e7d1, 0x696967d1, 0x6969a0be, 0x69697e84, 0x69697d82, 0x696980a1,
			0x6969c6e5, 0x6969585d, 0x6969fdbb, 0x6969ad7d, 0x6969217f, 0x69698e9d, 0x6969415d, 0x6969b732, 0x6969f629, 0x69691b52,
			0x696976c6, 0x69697ddc, 0x6969a3a7, 0x6969f6d1, 0x6969b5e2, 0x696924c3, 0x6969c9b7, 0x6969e7f5, 0x696933d1, 0x6969c614,
			0x696991ed, 0x69690df7, 0x6969f62c, 0x6969c75b, 0x69690f93, 0x6969dd71, 0x69694ac7, 0x6969e0ab, 0x6969989d, 0x69690e27,
			0x6969442b, 0x6969d7d2, 0x6969e244, 0x6969da11, 0x69699269, 0x696941bd, 0x69695601, 0x6969ffb4, 0x6969758f, 0x6969ae65,
			0x696996fa, 0x6969f532, 0x69694eae, 0x69690346, 0x6969c910, 0x69691d1c, 0x69690526, 0x69693f67, 0x696925a4, 0x6969db7e,
			0x69699de4, 0x69693545, 0x69698e91, 0x6969ba9d, 0x6969b584, 0x696993d6, 0x69695684, 0x696924c6, 0x6969c916, 0x696935b3,
			0x6969454a, 0x69690299, 0x6969862b, 0x696924f0, 0x6969eae3, 0x69699a85, 0x69696155, 0x69694923, 0x6969de53, 0x696934c1,
			0x6969cd53, 0x696913a5, 0x696950b9, 0x6969e7bb, 0x69691074, 0x69693cac, 0x6969ed55, 0x6969cbee, 0x6969b787, 0x6969f6f1,
			0x6969ea4f, 0x6969112b, 0x6969928c, 0x69690e02, 0x6969126a, 0x6969e629, 0x69694598, 0x69696e97, 0x69694d84, 0x69694cfb,
			0x696936a0, 0x69696583, 0x6969f781, 0x696933f0, 0x6969719a, 0x6969928b, 0x6969de39, 0x6969fd03, 0x69692d77, 0x696976d8,
			0x6969027f, 0x6969fc22, 0x69699689, 0x69694510, 0x69690cb1, 0x6969076b, 0x6969bb71, 0x696952c4, 0x69695e7e, 0x6969948d,
			0x6969abcd, 0x6969d55e, 0x69690b2b, 0x69698f13, 0x6969b83f, 0x6969a816, 0x69694ff8, 0x696985a0, 0x6969056a, 0x696992d8,
			0x6969a024, 0x6969f2aa, 0x6969bf92, 0x69692237, 0x696973cd, 0x6969e0f2, 0x6969be16, 0x6969aa4a, 0x696934ef, 0x69694cd4,
			0x6969f7ba, 0x69698233, 0x6969c1ff, 0x6969a655, 0x6969d070, 0x69699a47, 0x6969f675, 0x69695a0e, 0x6969a745, 0x696902e0,
			0x69698a9b, 0x6969eb12, 0x69696cbf, 0x696929e8, 0x6969dd96, 0x696950e5, 0x69699501, 0x69693c7f, 0x69696cca, 0x6969bedc,
			0x69694e6f, 0x6969d173, 0x69693483, 0x6969d232, 0x6969abcc, 0x69690879, 0x6969e2a4, 0x696940b4, 0x696972e0, 0x6969c149,
			0x6969d06c, 0x69696805, 0x69699908, 0x69698547, 0x6969cff1, 0x69695cde, 0x69699da6, 0x69698ef3, 0x6969008e, 0x696997e9,
			0x6969da2e, 0x696984f3, 0x696976f6, 0x6969e625, 0x6969b58c, 0x69697c11, 0x69695645, 0x69697397, 0x69696915, 0x69693de3,
			0x69697b91, 0x6969dfb4, 0x6969c740, 0x696917e1, 0x69692b4c, 0x69693cb6, 0x6969c6d4, 0x6969b972, 0x6969c42e, 0x6969e379,
			0x696912bd, 0x6969f82e, 0x696900bb, 0x6969d5b0, 0x6969a937, 0x69690c61, 0x6969f915, 0x6969efbb, 0x69695fee, 0x69695ea3,
			0x6969419a, 0x6969d5e0, 0x69697c42, 0x6969bf4f, 0x6969f669, 0x696980f3, 0x6969c7c2, 0x6969ddef, 0x6969985d, 0x6969e989,
			0x69691653, 0x69695c8f, 0x6969e24f, 0x6969f96d, 0x6969a7e0, 0x69690d80, 0x6969ebc4, 0x696983f0, 0x69699cf3, 0x69694c06,
			0x6969afe3, 0x69695c2a, 0x69694eaa, 0x6969e942, 0x6969e102, 0x69697de8, 0x696924d6, 0x696966aa, 0x6969b937, 0x6969fb24,
			0x69692762, 0x6969825b, 0x6969cf10, 0x6969bc7f, 0x6969f2ee, 0x6969f5df, 0x6969a396, 0x6969fc18, 0x69693ad2, 0x6969987f,
			0x696926fb, 0x69693272, 0x6969ca0c, 0x6969e9f0, 0x696984c3, 0x6969aef3, 0x6969af78, 0x696920cd, 0x6969700c, 0x69694dff,
			0x6969d445, 0x6969c6d3, 0x696946c5, 0x696948d5, 0x6969c2b5, 0x69697d0d, 0x69693dcc, 0x6969c8e8, 0x6969f875, 0x6969a252,
			0x6969b2f2, 0x696974ad, 0x69691941, 0x69694579, 0x69696972, 0x69692371, 0x6969b725, 0x6969ce60, 0x6969f451, 0x69693bda
			);
	}
	
	int callret32(LPVOID fnAddress) {

		typedef int fn(
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int
		);

		return ((fn*)fnAddress)(
			0x69695773, 0x696990cc, 0x696954ee, 0x6969afdd, 0x6969d991, 0x6969091b, 0x6969d02b, 0x6969438e, 0x6969f7ca, 0x696964bc,
			0x696903bb, 0x6969dc50, 0x6969e3a5, 0x696979ce, 0x6969b7c2, 0x696971d1, 0x696918ee, 0x69697119, 0x6969afb3, 0x6969eccf,
			0x6969d881, 0x69690d1f, 0x69695bb4, 0x6969cc76, 0x6969e087, 0x696939d9, 0x6969df00, 0x69691f84, 0x69694e40, 0x696958a8,
			0x69691832, 0x69691d46, 0x69694803, 0x69692424, 0x6969c959, 0x69698a67, 0x6969eee2, 0x6969324b, 0x696937ba, 0x696956e1,
			0x6969b020, 0x69697f7c, 0x69697d8c, 0x69699166, 0x6969c314, 0x69690184, 0x6969daee, 0x69699de6, 0x69698223, 0x69695ee1,
			0x69690875, 0x696992a5, 0x6969ee60, 0x69691281, 0x696967c1, 0x69697bb3, 0x6969ef80, 0x69695cfe, 0x69696fd2, 0x696994af,
			0x69692f42, 0x69694a0a, 0x69696ed0, 0x69690096, 0x6969818d, 0x69690514, 0x696926fd, 0x6969741f, 0x6969a272, 0x6969c7b5,
			0x6969d52f, 0x6969ce7c, 0x69693cd3, 0x69690ffc, 0x69698f16, 0x6969429d, 0x69696550, 0x69692dfb, 0x69697ee4, 0x6969f05e,
			0x6969ecc8, 0x69692661, 0x6969f042, 0x69698d95, 0x69695f01, 0x69691e2d, 0x6969820d, 0x6969f93f, 0x6969f749, 0x6969f753,
			0x6969d51a, 0x6969d3d7, 0x6969787a, 0x69694bfe, 0x69699fa3, 0x69695b29, 0x6969a4c2, 0x69695bfd, 0x69694a0e, 0x6969ad6b,
			0x6969e392, 0x6969c928, 0x69692618, 0x69691c9e, 0x696974bf, 0x6969a5a1, 0x6969f3ee, 0x6969c7af, 0x6969eba6, 0x6969f12b,
			0x6969846a, 0x6969a36e, 0x69690e41, 0x69698592, 0x6969fd45, 0x6969fd58, 0x6969cfe5, 0x696915ef, 0x6969bfcb, 0x69692238,
			0x69698a5a, 0x696969d0, 0x6969cc23, 0x69692a09, 0x6969df8d, 0x6969771c, 0x6969f2fa, 0x696980d8, 0x6969dffc, 0x6969ebdb,
			0x6969686f, 0x6969e534, 0x6969c49e, 0x69698b9c, 0x6969d670, 0x69694e3f, 0x6969b818, 0x69695c9a, 0x6969a6b9, 0x696965ed,
			0x6969347f, 0x69690286, 0x696997be, 0x6969a3e2, 0x69699b4a, 0x6969f69e, 0x69694906, 0x69690c53, 0x6969fe28, 0x69697f83,
			0x69692586, 0x6969e409, 0x6969ce2b, 0x69699a61, 0x6969087c, 0x6969a3a6, 0x69692780, 0x6969f323, 0x696993d9, 0x69694cd9,
			0x69690ce3, 0x69693d9b, 0x6969e03c, 0x6969e2ff, 0x69690156, 0x6969a187, 0x6969394a, 0x6969b57f, 0x6969aeaa, 0x6969276a,
			0x69692e0e, 0x6969c296, 0x69693196, 0x6969d1b0, 0x6969fde3, 0x6969d45a, 0x69695f6e, 0x6969e2f3, 0x6969a11c, 0x6969a181,
			0x69691f4b, 0x696901a9, 0x6969157d, 0x69693a49, 0x6969a0f0, 0x6969dd4c, 0x6969f05d, 0x696944ae, 0x69697099, 0x6969f384,
			0x69692a91, 0x6969ed45, 0x6969f379, 0x69693b2e, 0x6969ce87, 0x696920fb, 0x6969cac9, 0x69697f19, 0x696905fb, 0x69693cb2,
			0x6969aa04, 0x69692520, 0x69694f13, 0x6969cca9, 0x6969bace, 0x69699e0f, 0x69694b76, 0x69699961, 0x69696a6d, 0x69693e05,
			0x6969431a, 0x6969d63d, 0x6969b4fb, 0x69694af7, 0x6969a03c, 0x6969b241, 0x6969cc45, 0x69695f65, 0x69694ae7, 0x6969ef08,
			0x69690f2e, 0x696989fb, 0x6969d4c9, 0x69695c1c, 0x69690d25, 0x6969e171, 0x69697c7e, 0x69695562, 0x6969c778, 0x6969f7e5,
			0x6969507f, 0x6969f026, 0x6969bf41, 0x69690655, 0x696932d5, 0x6969c1a4, 0x696968d6, 0x69693f66, 0x6969a0c0, 0x6969e809,
			0x69692e25, 0x696947cb, 0x6969b8c7, 0x6969e3ff, 0x6969696f, 0x696902e8, 0x696972b9, 0x69694f88, 0x6969088e, 0x6969e1c4,
			0x69697ec8, 0x69698a18, 0x6969f009, 0x69692e09, 0x6969ecd7, 0x6969881e, 0x69699ba5, 0x6969fb58, 0x6969bb58, 0x696927b5,
			0x69691d09, 0x69697cf5, 0x6969b24e, 0x6969e6ec, 0x6969d986, 0x69692769, 0x6969110f, 0x69696d0a, 0x696990ed, 0x6969174c,
			0x6969ff41, 0x6969ccb5, 0x696928bc, 0x69697bc5, 0x69697c61, 0x6969846d, 0x69691c32, 0x69693893, 0x69692e43, 0x696910bb,
			0x6969301b, 0x6969b46c, 0x6969c26e, 0x69691307, 0x6969c19e, 0x69694137, 0x696921e5, 0x6969fecc, 0x69694932, 0x69690088,
			0x6969a472, 0x6969132a, 0x6969b322, 0x6969f4d4, 0x696990cd, 0x6969f60c, 0x6969ad0f, 0x69696d36, 0x6969b9c3, 0x69690b07,
			0x69698181, 0x696954d1, 0x6969aac8, 0x69697de1, 0x6969e9b8, 0x696937a3, 0x6969cf7b, 0x69698913, 0x69695b48, 0x696954bb,
			0x6969ebbe, 0x69693f41, 0x6969c2c6, 0x69692183, 0x69692e2e, 0x6969362e, 0x6969bd3d, 0x69696a3c, 0x696970bc, 0x6969e41f,
			0x69694df3, 0x6969dbe9, 0x6969a968, 0x6969598c, 0x696962be, 0x696907a0, 0x69693602, 0x6969ab33, 0x6969e260, 0x6969a7ab,
			0x6969547b, 0x69692437, 0x6969d05a, 0x69693d24, 0x69692398, 0x696949e7, 0x6969720f, 0x6969b6ee, 0x696914a7, 0x6969ffe1,
			0x69695a26, 0x696924e9, 0x6969c44b, 0x69690fef, 0x6969433d, 0x6969fee0, 0x6969c36d, 0x696959b1, 0x6969a733, 0x69692af1,
			0x696999a2, 0x6969d4e2, 0x69697b24, 0x69693136, 0x6969eeb9, 0x6969de19, 0x69690db0, 0x6969a2b0, 0x69699214, 0x6969118f,
			0x6969480e, 0x69696244, 0x6969c2fe, 0x69695891, 0x69692d02, 0x6969c2be, 0x6969e5ac, 0x696931b3, 0x6969ce7f, 0x69695f66,
			0x696979c6, 0x69698c54, 0x69698cfc, 0x6969dac1, 0x696902c6, 0x6969028d, 0x6969a18f, 0x69693069, 0x69694789, 0x696974f1,
			0x69694dcc, 0x696913da, 0x6969518e, 0x6969c7ee, 0x69699bc0, 0x69699b07, 0x69690fe3, 0x69697a0f, 0x696934a8, 0x69695283,
			0x69698b21, 0x69696dfc, 0x6969f599, 0x696941ca, 0x69698d32, 0x69691841, 0x696963f9, 0x6969efb3, 0x696900ca, 0x6969873c,
			0x6969bb3f, 0x69694136, 0x6969a7ef, 0x696923d5, 0x69695791, 0x69698e79, 0x69698f40, 0x696978ab, 0x6969e2ce, 0x696948b3,
			0x69694575, 0x696919e1, 0x69693fc9, 0x69692b2c, 0x69697702, 0x6969665a, 0x696938b3, 0x69696593, 0x6969f2b6, 0x6969750d,
			0x6969aa95, 0x6969b176, 0x69691798, 0x69692ce1, 0x696959cc, 0x6969534d, 0x69692b16, 0x6969da47, 0x6969d0d6, 0x69697d0a,
			0x69695d62, 0x69690d92, 0x6969b4a3, 0x69699b2c, 0x6969e4bf, 0x6969b8dc, 0x69695387, 0x6969077d, 0x69699ce7, 0x696960d7,
			0x69692e60, 0x6969e098, 0x69699142, 0x696920dc, 0x69698606, 0x69690e3c, 0x6969c73c, 0x6969ef2d, 0x69691d32, 0x696964d5,
			0x696901a8, 0x6969d6d0, 0x69697ac3, 0x6969d996, 0x6969edb0, 0x6969e123, 0x69695122, 0x69699205, 0x6969890a, 0x69697719,
			0x696985b7, 0x696932f4, 0x6969e1fc, 0x6969e33c, 0x69690851, 0x69691d37, 0x6969e695, 0x69698fd5, 0x6969737e, 0x69696394,
			0x696966e6, 0x6969846e, 0x696969f7, 0x69696bdb, 0x69698185, 0x696910f7, 0x6969d41e, 0x6969242f, 0x6969a2f8, 0x69698bbe,
			0x69696d40, 0x69698150, 0x69691c12, 0x69690997, 0x6969c029, 0x696973ea, 0x69695cd3, 0x6969a494, 0x696951f3, 0x6969d646,
			0x696981b6, 0x696942c6, 0x6969b993, 0x69692a6f, 0x69698292, 0x69694fc6, 0x6969c79e, 0x6969db3a, 0x6969b4ac, 0x6969b4e6,
			0x696970b5, 0x6969484b, 0x69698360, 0x69698dce, 0x69698512, 0x6969737d, 0x69695b5e, 0x69697a8a, 0x6969304a, 0x6969883c,
			0x69696736, 0x69694a7a, 0x6969c193, 0x69698bab, 0x69698cb3, 0x696952ca, 0x6969273e, 0x6969a98b, 0x6969af57, 0x6969b060,
			0x6969a2d1, 0x6969a8d6, 0x6969cef1, 0x696945ea, 0x69693208, 0x696937e8, 0x6969dcad, 0x6969cc9d, 0x6969fb63, 0x6969785f,
			0x69696186, 0x69694045, 0x6969f796, 0x69696f75, 0x69690f97, 0x6969fe99, 0x6969fdb6, 0x6969264b, 0x6969920b, 0x69694800,
			0x696910a2, 0x6969087b, 0x69694195, 0x6969417f, 0x6969283c, 0x6969578e, 0x69698482, 0x69691d7d, 0x6969bd1e, 0x6969e77d,
			0x69699d94, 0x6969afaa, 0x6969fecd, 0x69691b43, 0x69692650, 0x69693d3a, 0x6969f176, 0x69696b1b, 0x69691ad0, 0x6969fae5,
			0x6969f486, 0x696910e8, 0x6969b916, 0x6969d4f0, 0x69698dd3, 0x696971c6, 0x6969b129, 0x69696ab4, 0x6969b6b2, 0x6969340e,
			0x69697846, 0x6969d41c, 0x696989ad, 0x69692604, 0x69699287, 0x6969c704, 0x6969ab64, 0x6969cef4, 0x6969089f, 0x69696d58,
			0x69696503, 0x6969a37a, 0x69693c62, 0x6969429e, 0x6969385f, 0x696957d7, 0x69694dd8, 0x69692ad1, 0x6969c91a, 0x69697229,
			0x6969c0c6, 0x69695239, 0x69696e8b, 0x696977b9, 0x69690b4b, 0x69695ffb, 0x69691996, 0x6969f4b9, 0x69696754, 0x6969d778,
			0x69697c8e, 0x69697920, 0x6969a1de, 0x69696542, 0x6969b397, 0x6969c588, 0x696930ec, 0x6969122d, 0x6969b6f1, 0x6969b7e0,
			0x696966a3, 0x6969de36, 0x6969fc86, 0x696916d5, 0x6969669a, 0x69692c35, 0x6969424e, 0x69695bfa, 0x6969356d, 0x69698ea5,
			0x6969763c, 0x69697b99, 0x6969557c, 0x6969d29f, 0x69691afc, 0x6969bbc0, 0x6969db31, 0x69698040, 0x69697429, 0x69692599,
			0x69695280, 0x69692719, 0x69693a16, 0x69694872, 0x696938d1, 0x69695b07, 0x6969c093, 0x6969cc6b, 0x696941f5, 0x69693328,
			0x6969ea8f, 0x69695e8d, 0x6969f303, 0x6969ca7c, 0x69699e5f, 0x69698f87, 0x6969b852, 0x6969196a, 0x69699e7c, 0x69698610,
			0x6969c8f1, 0x6969c57d, 0x69697a09, 0x69690c73, 0x69695b0a, 0x69694787, 0x6969c7a3, 0x6969901e, 0x69699784, 0x696945ec,
			0x696974cb, 0x69697b98, 0x6969da7a, 0x696928d7, 0x69694dbc, 0x6969cee1, 0x6969090d, 0x696965e8, 0x69698264, 0x69691186,
			0x69695269, 0x696904e0, 0x6969bba1, 0x696981ab, 0x696915ad, 0x69694143, 0x6969912b, 0x6969a1cd, 0x69690874, 0x6969f95b,
			0x69699bb4, 0x69690800, 0x6969be8d, 0x69696705, 0x696911f5, 0x69693bc0, 0x69699707, 0x6969a9bc, 0x69691955, 0x6969370c,
			0x6969d746, 0x6969e986, 0x6969cd6c, 0x69698823, 0x6969a52f, 0x69695d6c, 0x6969697c, 0x6969e36a, 0x6969bdd5, 0x6969c91c,
			0x69692fc1, 0x69691b1c, 0x6969aa70, 0x6969693f, 0x696945bd, 0x69694b6b, 0x69694361, 0x69691ac9, 0x69692689, 0x696912e9,
			0x6969ba00, 0x6969d4d2, 0x696948a4, 0x6969cd9e, 0x69698eff, 0x6969dfc7, 0x6969efa5, 0x69694061, 0x69698c75, 0x69692c6e,
			0x69697e57, 0x69693630, 0x69691d39, 0x69694281, 0x6969e7d1, 0x696967d1, 0x6969a0be, 0x69697e84, 0x69697d82, 0x696980a1,
			0x6969c6e5, 0x6969585d, 0x6969fdbb, 0x6969ad7d, 0x6969217f, 0x69698e9d, 0x6969415d, 0x6969b732, 0x6969f629, 0x69691b52,
			0x696976c6, 0x69697ddc, 0x6969a3a7, 0x6969f6d1, 0x6969b5e2, 0x696924c3, 0x6969c9b7, 0x6969e7f5, 0x696933d1, 0x6969c614,
			0x696991ed, 0x69690df7, 0x6969f62c, 0x6969c75b, 0x69690f93, 0x6969dd71, 0x69694ac7, 0x6969e0ab, 0x6969989d, 0x69690e27,
			0x6969442b, 0x6969d7d2, 0x6969e244, 0x6969da11, 0x69699269, 0x696941bd, 0x69695601, 0x6969ffb4, 0x6969758f, 0x6969ae65,
			0x696996fa, 0x6969f532, 0x69694eae, 0x69690346, 0x6969c910, 0x69691d1c, 0x69690526, 0x69693f67, 0x696925a4, 0x6969db7e,
			0x69699de4, 0x69693545, 0x69698e91, 0x6969ba9d, 0x6969b584, 0x696993d6, 0x69695684, 0x696924c6, 0x6969c916, 0x696935b3,
			0x6969454a, 0x69690299, 0x6969862b, 0x696924f0, 0x6969eae3, 0x69699a85, 0x69696155, 0x69694923, 0x6969de53, 0x696934c1,
			0x6969cd53, 0x696913a5, 0x696950b9, 0x6969e7bb, 0x69691074, 0x69693cac, 0x6969ed55, 0x6969cbee, 0x6969b787, 0x6969f6f1,
			0x6969ea4f, 0x6969112b, 0x6969928c, 0x69690e02, 0x6969126a, 0x6969e629, 0x69694598, 0x69696e97, 0x69694d84, 0x69694cfb,
			0x696936a0, 0x69696583, 0x6969f781, 0x696933f0, 0x6969719a, 0x6969928b, 0x6969de39, 0x6969fd03, 0x69692d77, 0x696976d8,
			0x6969027f, 0x6969fc22, 0x69699689, 0x69694510, 0x69690cb1, 0x6969076b, 0x6969bb71, 0x696952c4, 0x69695e7e, 0x6969948d,
			0x6969abcd, 0x6969d55e, 0x69690b2b, 0x69698f13, 0x6969b83f, 0x6969a816, 0x69694ff8, 0x696985a0, 0x6969056a, 0x696992d8,
			0x6969a024, 0x6969f2aa, 0x6969bf92, 0x69692237, 0x696973cd, 0x6969e0f2, 0x6969be16, 0x6969aa4a, 0x696934ef, 0x69694cd4,
			0x6969f7ba, 0x69698233, 0x6969c1ff, 0x6969a655, 0x6969d070, 0x69699a47, 0x6969f675, 0x69695a0e, 0x6969a745, 0x696902e0,
			0x69698a9b, 0x6969eb12, 0x69696cbf, 0x696929e8, 0x6969dd96, 0x696950e5, 0x69699501, 0x69693c7f, 0x69696cca, 0x6969bedc,
			0x69694e6f, 0x6969d173, 0x69693483, 0x6969d232, 0x6969abcc, 0x69690879, 0x6969e2a4, 0x696940b4, 0x696972e0, 0x6969c149,
			0x6969d06c, 0x69696805, 0x69699908, 0x69698547, 0x6969cff1, 0x69695cde, 0x69699da6, 0x69698ef3, 0x6969008e, 0x696997e9,
			0x6969da2e, 0x696984f3, 0x696976f6, 0x6969e625, 0x6969b58c, 0x69697c11, 0x69695645, 0x69697397, 0x69696915, 0x69693de3,
			0x69697b91, 0x6969dfb4, 0x6969c740, 0x696917e1, 0x69692b4c, 0x69693cb6, 0x6969c6d4, 0x6969b972, 0x6969c42e, 0x6969e379,
			0x696912bd, 0x6969f82e, 0x696900bb, 0x6969d5b0, 0x6969a937, 0x69690c61, 0x6969f915, 0x6969efbb, 0x69695fee, 0x69695ea3,
			0x6969419a, 0x6969d5e0, 0x69697c42, 0x6969bf4f, 0x6969f669, 0x696980f3, 0x6969c7c2, 0x6969ddef, 0x6969985d, 0x6969e989,
			0x69691653, 0x69695c8f, 0x6969e24f, 0x6969f96d, 0x6969a7e0, 0x69690d80, 0x6969ebc4, 0x696983f0, 0x69699cf3, 0x69694c06,
			0x6969afe3, 0x69695c2a, 0x69694eaa, 0x6969e942, 0x6969e102, 0x69697de8, 0x696924d6, 0x696966aa, 0x6969b937, 0x6969fb24,
			0x69692762, 0x6969825b, 0x6969cf10, 0x6969bc7f, 0x6969f2ee, 0x6969f5df, 0x6969a396, 0x6969fc18, 0x69693ad2, 0x6969987f,
			0x696926fb, 0x69693272, 0x6969ca0c, 0x6969e9f0, 0x696984c3, 0x6969aef3, 0x6969af78, 0x696920cd, 0x6969700c, 0x69694dff,
			0x6969d445, 0x6969c6d3, 0x696946c5, 0x696948d5, 0x6969c2b5, 0x69697d0d, 0x69693dcc, 0x6969c8e8, 0x6969f875, 0x6969a252,
			0x6969b2f2, 0x696974ad, 0x69691941, 0x69694579, 0x69696972, 0x69692371, 0x6969b725, 0x6969ce60, 0x6969f451, 0x69693bda
			);
	}

	__int64 callret64(LPVOID fnAddress) {

		typedef __int64 fn(
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int,
			int, int, int, int, int, int, int, int, int, int
		);

		return ((fn*)fnAddress)(
			0x69695773, 0x696990cc, 0x696954ee, 0x6969afdd, 0x6969d991, 0x6969091b, 0x6969d02b, 0x6969438e, 0x6969f7ca, 0x696964bc,
			0x696903bb, 0x6969dc50, 0x6969e3a5, 0x696979ce, 0x6969b7c2, 0x696971d1, 0x696918ee, 0x69697119, 0x6969afb3, 0x6969eccf,
			0x6969d881, 0x69690d1f, 0x69695bb4, 0x6969cc76, 0x6969e087, 0x696939d9, 0x6969df00, 0x69691f84, 0x69694e40, 0x696958a8,
			0x69691832, 0x69691d46, 0x69694803, 0x69692424, 0x6969c959, 0x69698a67, 0x6969eee2, 0x6969324b, 0x696937ba, 0x696956e1,
			0x6969b020, 0x69697f7c, 0x69697d8c, 0x69699166, 0x6969c314, 0x69690184, 0x6969daee, 0x69699de6, 0x69698223, 0x69695ee1,
			0x69690875, 0x696992a5, 0x6969ee60, 0x69691281, 0x696967c1, 0x69697bb3, 0x6969ef80, 0x69695cfe, 0x69696fd2, 0x696994af,
			0x69692f42, 0x69694a0a, 0x69696ed0, 0x69690096, 0x6969818d, 0x69690514, 0x696926fd, 0x6969741f, 0x6969a272, 0x6969c7b5,
			0x6969d52f, 0x6969ce7c, 0x69693cd3, 0x69690ffc, 0x69698f16, 0x6969429d, 0x69696550, 0x69692dfb, 0x69697ee4, 0x6969f05e,
			0x6969ecc8, 0x69692661, 0x6969f042, 0x69698d95, 0x69695f01, 0x69691e2d, 0x6969820d, 0x6969f93f, 0x6969f749, 0x6969f753,
			0x6969d51a, 0x6969d3d7, 0x6969787a, 0x69694bfe, 0x69699fa3, 0x69695b29, 0x6969a4c2, 0x69695bfd, 0x69694a0e, 0x6969ad6b,
			0x6969e392, 0x6969c928, 0x69692618, 0x69691c9e, 0x696974bf, 0x6969a5a1, 0x6969f3ee, 0x6969c7af, 0x6969eba6, 0x6969f12b,
			0x6969846a, 0x6969a36e, 0x69690e41, 0x69698592, 0x6969fd45, 0x6969fd58, 0x6969cfe5, 0x696915ef, 0x6969bfcb, 0x69692238,
			0x69698a5a, 0x696969d0, 0x6969cc23, 0x69692a09, 0x6969df8d, 0x6969771c, 0x6969f2fa, 0x696980d8, 0x6969dffc, 0x6969ebdb,
			0x6969686f, 0x6969e534, 0x6969c49e, 0x69698b9c, 0x6969d670, 0x69694e3f, 0x6969b818, 0x69695c9a, 0x6969a6b9, 0x696965ed,
			0x6969347f, 0x69690286, 0x696997be, 0x6969a3e2, 0x69699b4a, 0x6969f69e, 0x69694906, 0x69690c53, 0x6969fe28, 0x69697f83,
			0x69692586, 0x6969e409, 0x6969ce2b, 0x69699a61, 0x6969087c, 0x6969a3a6, 0x69692780, 0x6969f323, 0x696993d9, 0x69694cd9,
			0x69690ce3, 0x69693d9b, 0x6969e03c, 0x6969e2ff, 0x69690156, 0x6969a187, 0x6969394a, 0x6969b57f, 0x6969aeaa, 0x6969276a,
			0x69692e0e, 0x6969c296, 0x69693196, 0x6969d1b0, 0x6969fde3, 0x6969d45a, 0x69695f6e, 0x6969e2f3, 0x6969a11c, 0x6969a181,
			0x69691f4b, 0x696901a9, 0x6969157d, 0x69693a49, 0x6969a0f0, 0x6969dd4c, 0x6969f05d, 0x696944ae, 0x69697099, 0x6969f384,
			0x69692a91, 0x6969ed45, 0x6969f379, 0x69693b2e, 0x6969ce87, 0x696920fb, 0x6969cac9, 0x69697f19, 0x696905fb, 0x69693cb2,
			0x6969aa04, 0x69692520, 0x69694f13, 0x6969cca9, 0x6969bace, 0x69699e0f, 0x69694b76, 0x69699961, 0x69696a6d, 0x69693e05,
			0x6969431a, 0x6969d63d, 0x6969b4fb, 0x69694af7, 0x6969a03c, 0x6969b241, 0x6969cc45, 0x69695f65, 0x69694ae7, 0x6969ef08,
			0x69690f2e, 0x696989fb, 0x6969d4c9, 0x69695c1c, 0x69690d25, 0x6969e171, 0x69697c7e, 0x69695562, 0x6969c778, 0x6969f7e5,
			0x6969507f, 0x6969f026, 0x6969bf41, 0x69690655, 0x696932d5, 0x6969c1a4, 0x696968d6, 0x69693f66, 0x6969a0c0, 0x6969e809,
			0x69692e25, 0x696947cb, 0x6969b8c7, 0x6969e3ff, 0x6969696f, 0x696902e8, 0x696972b9, 0x69694f88, 0x6969088e, 0x6969e1c4,
			0x69697ec8, 0x69698a18, 0x6969f009, 0x69692e09, 0x6969ecd7, 0x6969881e, 0x69699ba5, 0x6969fb58, 0x6969bb58, 0x696927b5,
			0x69691d09, 0x69697cf5, 0x6969b24e, 0x6969e6ec, 0x6969d986, 0x69692769, 0x6969110f, 0x69696d0a, 0x696990ed, 0x6969174c,
			0x6969ff41, 0x6969ccb5, 0x696928bc, 0x69697bc5, 0x69697c61, 0x6969846d, 0x69691c32, 0x69693893, 0x69692e43, 0x696910bb,
			0x6969301b, 0x6969b46c, 0x6969c26e, 0x69691307, 0x6969c19e, 0x69694137, 0x696921e5, 0x6969fecc, 0x69694932, 0x69690088,
			0x6969a472, 0x6969132a, 0x6969b322, 0x6969f4d4, 0x696990cd, 0x6969f60c, 0x6969ad0f, 0x69696d36, 0x6969b9c3, 0x69690b07,
			0x69698181, 0x696954d1, 0x6969aac8, 0x69697de1, 0x6969e9b8, 0x696937a3, 0x6969cf7b, 0x69698913, 0x69695b48, 0x696954bb,
			0x6969ebbe, 0x69693f41, 0x6969c2c6, 0x69692183, 0x69692e2e, 0x6969362e, 0x6969bd3d, 0x69696a3c, 0x696970bc, 0x6969e41f,
			0x69694df3, 0x6969dbe9, 0x6969a968, 0x6969598c, 0x696962be, 0x696907a0, 0x69693602, 0x6969ab33, 0x6969e260, 0x6969a7ab,
			0x6969547b, 0x69692437, 0x6969d05a, 0x69693d24, 0x69692398, 0x696949e7, 0x6969720f, 0x6969b6ee, 0x696914a7, 0x6969ffe1,
			0x69695a26, 0x696924e9, 0x6969c44b, 0x69690fef, 0x6969433d, 0x6969fee0, 0x6969c36d, 0x696959b1, 0x6969a733, 0x69692af1,
			0x696999a2, 0x6969d4e2, 0x69697b24, 0x69693136, 0x6969eeb9, 0x6969de19, 0x69690db0, 0x6969a2b0, 0x69699214, 0x6969118f,
			0x6969480e, 0x69696244, 0x6969c2fe, 0x69695891, 0x69692d02, 0x6969c2be, 0x6969e5ac, 0x696931b3, 0x6969ce7f, 0x69695f66,
			0x696979c6, 0x69698c54, 0x69698cfc, 0x6969dac1, 0x696902c6, 0x6969028d, 0x6969a18f, 0x69693069, 0x69694789, 0x696974f1,
			0x69694dcc, 0x696913da, 0x6969518e, 0x6969c7ee, 0x69699bc0, 0x69699b07, 0x69690fe3, 0x69697a0f, 0x696934a8, 0x69695283,
			0x69698b21, 0x69696dfc, 0x6969f599, 0x696941ca, 0x69698d32, 0x69691841, 0x696963f9, 0x6969efb3, 0x696900ca, 0x6969873c,
			0x6969bb3f, 0x69694136, 0x6969a7ef, 0x696923d5, 0x69695791, 0x69698e79, 0x69698f40, 0x696978ab, 0x6969e2ce, 0x696948b3,
			0x69694575, 0x696919e1, 0x69693fc9, 0x69692b2c, 0x69697702, 0x6969665a, 0x696938b3, 0x69696593, 0x6969f2b6, 0x6969750d,
			0x6969aa95, 0x6969b176, 0x69691798, 0x69692ce1, 0x696959cc, 0x6969534d, 0x69692b16, 0x6969da47, 0x6969d0d6, 0x69697d0a,
			0x69695d62, 0x69690d92, 0x6969b4a3, 0x69699b2c, 0x6969e4bf, 0x6969b8dc, 0x69695387, 0x6969077d, 0x69699ce7, 0x696960d7,
			0x69692e60, 0x6969e098, 0x69699142, 0x696920dc, 0x69698606, 0x69690e3c, 0x6969c73c, 0x6969ef2d, 0x69691d32, 0x696964d5,
			0x696901a8, 0x6969d6d0, 0x69697ac3, 0x6969d996, 0x6969edb0, 0x6969e123, 0x69695122, 0x69699205, 0x6969890a, 0x69697719,
			0x696985b7, 0x696932f4, 0x6969e1fc, 0x6969e33c, 0x69690851, 0x69691d37, 0x6969e695, 0x69698fd5, 0x6969737e, 0x69696394,
			0x696966e6, 0x6969846e, 0x696969f7, 0x69696bdb, 0x69698185, 0x696910f7, 0x6969d41e, 0x6969242f, 0x6969a2f8, 0x69698bbe,
			0x69696d40, 0x69698150, 0x69691c12, 0x69690997, 0x6969c029, 0x696973ea, 0x69695cd3, 0x6969a494, 0x696951f3, 0x6969d646,
			0x696981b6, 0x696942c6, 0x6969b993, 0x69692a6f, 0x69698292, 0x69694fc6, 0x6969c79e, 0x6969db3a, 0x6969b4ac, 0x6969b4e6,
			0x696970b5, 0x6969484b, 0x69698360, 0x69698dce, 0x69698512, 0x6969737d, 0x69695b5e, 0x69697a8a, 0x6969304a, 0x6969883c,
			0x69696736, 0x69694a7a, 0x6969c193, 0x69698bab, 0x69698cb3, 0x696952ca, 0x6969273e, 0x6969a98b, 0x6969af57, 0x6969b060,
			0x6969a2d1, 0x6969a8d6, 0x6969cef1, 0x696945ea, 0x69693208, 0x696937e8, 0x6969dcad, 0x6969cc9d, 0x6969fb63, 0x6969785f,
			0x69696186, 0x69694045, 0x6969f796, 0x69696f75, 0x69690f97, 0x6969fe99, 0x6969fdb6, 0x6969264b, 0x6969920b, 0x69694800,
			0x696910a2, 0x6969087b, 0x69694195, 0x6969417f, 0x6969283c, 0x6969578e, 0x69698482, 0x69691d7d, 0x6969bd1e, 0x6969e77d,
			0x69699d94, 0x6969afaa, 0x6969fecd, 0x69691b43, 0x69692650, 0x69693d3a, 0x6969f176, 0x69696b1b, 0x69691ad0, 0x6969fae5,
			0x6969f486, 0x696910e8, 0x6969b916, 0x6969d4f0, 0x69698dd3, 0x696971c6, 0x6969b129, 0x69696ab4, 0x6969b6b2, 0x6969340e,
			0x69697846, 0x6969d41c, 0x696989ad, 0x69692604, 0x69699287, 0x6969c704, 0x6969ab64, 0x6969cef4, 0x6969089f, 0x69696d58,
			0x69696503, 0x6969a37a, 0x69693c62, 0x6969429e, 0x6969385f, 0x696957d7, 0x69694dd8, 0x69692ad1, 0x6969c91a, 0x69697229,
			0x6969c0c6, 0x69695239, 0x69696e8b, 0x696977b9, 0x69690b4b, 0x69695ffb, 0x69691996, 0x6969f4b9, 0x69696754, 0x6969d778,
			0x69697c8e, 0x69697920, 0x6969a1de, 0x69696542, 0x6969b397, 0x6969c588, 0x696930ec, 0x6969122d, 0x6969b6f1, 0x6969b7e0,
			0x696966a3, 0x6969de36, 0x6969fc86, 0x696916d5, 0x6969669a, 0x69692c35, 0x6969424e, 0x69695bfa, 0x6969356d, 0x69698ea5,
			0x6969763c, 0x69697b99, 0x6969557c, 0x6969d29f, 0x69691afc, 0x6969bbc0, 0x6969db31, 0x69698040, 0x69697429, 0x69692599,
			0x69695280, 0x69692719, 0x69693a16, 0x69694872, 0x696938d1, 0x69695b07, 0x6969c093, 0x6969cc6b, 0x696941f5, 0x69693328,
			0x6969ea8f, 0x69695e8d, 0x6969f303, 0x6969ca7c, 0x69699e5f, 0x69698f87, 0x6969b852, 0x6969196a, 0x69699e7c, 0x69698610,
			0x6969c8f1, 0x6969c57d, 0x69697a09, 0x69690c73, 0x69695b0a, 0x69694787, 0x6969c7a3, 0x6969901e, 0x69699784, 0x696945ec,
			0x696974cb, 0x69697b98, 0x6969da7a, 0x696928d7, 0x69694dbc, 0x6969cee1, 0x6969090d, 0x696965e8, 0x69698264, 0x69691186,
			0x69695269, 0x696904e0, 0x6969bba1, 0x696981ab, 0x696915ad, 0x69694143, 0x6969912b, 0x6969a1cd, 0x69690874, 0x6969f95b,
			0x69699bb4, 0x69690800, 0x6969be8d, 0x69696705, 0x696911f5, 0x69693bc0, 0x69699707, 0x6969a9bc, 0x69691955, 0x6969370c,
			0x6969d746, 0x6969e986, 0x6969cd6c, 0x69698823, 0x6969a52f, 0x69695d6c, 0x6969697c, 0x6969e36a, 0x6969bdd5, 0x6969c91c,
			0x69692fc1, 0x69691b1c, 0x6969aa70, 0x6969693f, 0x696945bd, 0x69694b6b, 0x69694361, 0x69691ac9, 0x69692689, 0x696912e9,
			0x6969ba00, 0x6969d4d2, 0x696948a4, 0x6969cd9e, 0x69698eff, 0x6969dfc7, 0x6969efa5, 0x69694061, 0x69698c75, 0x69692c6e,
			0x69697e57, 0x69693630, 0x69691d39, 0x69694281, 0x6969e7d1, 0x696967d1, 0x6969a0be, 0x69697e84, 0x69697d82, 0x696980a1,
			0x6969c6e5, 0x6969585d, 0x6969fdbb, 0x6969ad7d, 0x6969217f, 0x69698e9d, 0x6969415d, 0x6969b732, 0x6969f629, 0x69691b52,
			0x696976c6, 0x69697ddc, 0x6969a3a7, 0x6969f6d1, 0x6969b5e2, 0x696924c3, 0x6969c9b7, 0x6969e7f5, 0x696933d1, 0x6969c614,
			0x696991ed, 0x69690df7, 0x6969f62c, 0x6969c75b, 0x69690f93, 0x6969dd71, 0x69694ac7, 0x6969e0ab, 0x6969989d, 0x69690e27,
			0x6969442b, 0x6969d7d2, 0x6969e244, 0x6969da11, 0x69699269, 0x696941bd, 0x69695601, 0x6969ffb4, 0x6969758f, 0x6969ae65,
			0x696996fa, 0x6969f532, 0x69694eae, 0x69690346, 0x6969c910, 0x69691d1c, 0x69690526, 0x69693f67, 0x696925a4, 0x6969db7e,
			0x69699de4, 0x69693545, 0x69698e91, 0x6969ba9d, 0x6969b584, 0x696993d6, 0x69695684, 0x696924c6, 0x6969c916, 0x696935b3,
			0x6969454a, 0x69690299, 0x6969862b, 0x696924f0, 0x6969eae3, 0x69699a85, 0x69696155, 0x69694923, 0x6969de53, 0x696934c1,
			0x6969cd53, 0x696913a5, 0x696950b9, 0x6969e7bb, 0x69691074, 0x69693cac, 0x6969ed55, 0x6969cbee, 0x6969b787, 0x6969f6f1,
			0x6969ea4f, 0x6969112b, 0x6969928c, 0x69690e02, 0x6969126a, 0x6969e629, 0x69694598, 0x69696e97, 0x69694d84, 0x69694cfb,
			0x696936a0, 0x69696583, 0x6969f781, 0x696933f0, 0x6969719a, 0x6969928b, 0x6969de39, 0x6969fd03, 0x69692d77, 0x696976d8,
			0x6969027f, 0x6969fc22, 0x69699689, 0x69694510, 0x69690cb1, 0x6969076b, 0x6969bb71, 0x696952c4, 0x69695e7e, 0x6969948d,
			0x6969abcd, 0x6969d55e, 0x69690b2b, 0x69698f13, 0x6969b83f, 0x6969a816, 0x69694ff8, 0x696985a0, 0x6969056a, 0x696992d8,
			0x6969a024, 0x6969f2aa, 0x6969bf92, 0x69692237, 0x696973cd, 0x6969e0f2, 0x6969be16, 0x6969aa4a, 0x696934ef, 0x69694cd4,
			0x6969f7ba, 0x69698233, 0x6969c1ff, 0x6969a655, 0x6969d070, 0x69699a47, 0x6969f675, 0x69695a0e, 0x6969a745, 0x696902e0,
			0x69698a9b, 0x6969eb12, 0x69696cbf, 0x696929e8, 0x6969dd96, 0x696950e5, 0x69699501, 0x69693c7f, 0x69696cca, 0x6969bedc,
			0x69694e6f, 0x6969d173, 0x69693483, 0x6969d232, 0x6969abcc, 0x69690879, 0x6969e2a4, 0x696940b4, 0x696972e0, 0x6969c149,
			0x6969d06c, 0x69696805, 0x69699908, 0x69698547, 0x6969cff1, 0x69695cde, 0x69699da6, 0x69698ef3, 0x6969008e, 0x696997e9,
			0x6969da2e, 0x696984f3, 0x696976f6, 0x6969e625, 0x6969b58c, 0x69697c11, 0x69695645, 0x69697397, 0x69696915, 0x69693de3,
			0x69697b91, 0x6969dfb4, 0x6969c740, 0x696917e1, 0x69692b4c, 0x69693cb6, 0x6969c6d4, 0x6969b972, 0x6969c42e, 0x6969e379,
			0x696912bd, 0x6969f82e, 0x696900bb, 0x6969d5b0, 0x6969a937, 0x69690c61, 0x6969f915, 0x6969efbb, 0x69695fee, 0x69695ea3,
			0x6969419a, 0x6969d5e0, 0x69697c42, 0x6969bf4f, 0x6969f669, 0x696980f3, 0x6969c7c2, 0x6969ddef, 0x6969985d, 0x6969e989,
			0x69691653, 0x69695c8f, 0x6969e24f, 0x6969f96d, 0x6969a7e0, 0x69690d80, 0x6969ebc4, 0x696983f0, 0x69699cf3, 0x69694c06,
			0x6969afe3, 0x69695c2a, 0x69694eaa, 0x6969e942, 0x6969e102, 0x69697de8, 0x696924d6, 0x696966aa, 0x6969b937, 0x6969fb24,
			0x69692762, 0x6969825b, 0x6969cf10, 0x6969bc7f, 0x6969f2ee, 0x6969f5df, 0x6969a396, 0x6969fc18, 0x69693ad2, 0x6969987f,
			0x696926fb, 0x69693272, 0x6969ca0c, 0x6969e9f0, 0x696984c3, 0x6969aef3, 0x6969af78, 0x696920cd, 0x6969700c, 0x69694dff,
			0x6969d445, 0x6969c6d3, 0x696946c5, 0x696948d5, 0x6969c2b5, 0x69697d0d, 0x69693dcc, 0x6969c8e8, 0x6969f875, 0x6969a252,
			0x6969b2f2, 0x696974ad, 0x69691941, 0x69694579, 0x69696972, 0x69692371, 0x6969b725, 0x6969ce60, 0x6969f451, 0x69693bda
			);
	}


	typedef struct ArgumentData
	{
		char buf[8];
		bool is64;
		int buffer_size;
	};

	class Arguments
	{
	public:
		std::vector<ArgumentData> args;

		Arguments() {

		}

		// construct from serialized
		Arguments(LPVOID serialized, size_t size) {

			DataStream stream(serialized, size);
			int count = stream.pop<int>();
			//printf("count: %d\n", count);

			for (int i = 0; i < count; i++) {
				ArgumentData arg = stream.pop<ArgumentData>();
				if (arg.buffer_size > 0) {
					auto rs = stream.pop(arg.buffer_size);
					*(LPVOID*)arg.buf = rs;

					arg.is64 = sizeof(LPVOID) == 8;

					//printf("test %llx\n", *(LPVOID*)arg.buf);
					//printf("%s\n", *(char*)arg.buf);
				}
				args.push_back(arg);
			}
		}

		~Arguments() {

		}

		template<typename T>
		void add(T value) // buffer_size is for output and pointer pass
		{
			ArgumentData data;

			memset(&data, 0, sizeof(data));
			memcpy(data.buf, &value, sizeof(T));

			if (sizeof(T) == 8) data.is64 = true;

			args.push_back(data);
		}

		template<typename T>
		void addfirst(T value)
		{
			ArgumentData data;

			memset(&data, 0, sizeof(data));
			memcpy(data.buf, &value, sizeof(T));

			if (sizeof(T) == 8) data.is64 = true;

			args.insert(args.begin(), data);
		}

		template<typename T>
		T value(int index)
		{
			return *(T*)args[index].buf;
		}

		void add(char* buf, int size)
		{
			if (size > 8) return addbuffer(buf, size);

			ArgumentData data;

			memset(&data, 0, sizeof(data));
			memcpy(data.buf, buf, size);

			args.push_back(data);
		}

		void addbuffer(LPVOID buffer, int buffer_size)
		{
			ArgumentData data;
			memset(&data, 0, sizeof(data));
			data.buffer_size = buffer_size;

			*(LPVOID*)data.buf = buffer;

			data.is64 = sizeof(LPVOID) == 8;

			args.push_back(data);

		}

		void addfirst(char* buf, int size)
		{
			if (size > 8) return addbuffer(buf, size);

			ArgumentData data;

			memset(&data, 0, sizeof(data));
			memcpy(data.buf, buf, size);

			args.insert(args.begin(), data);
		}

		ArgumentData* buffer() {
			return args.data();
		}

		int size()
		{
			return args.size();
		}

		// count of ouput buffer
		int getbuffercount()
		{
			int count = 0;
			for (auto& it : args) if (it.buffer_size != 0) count++;
			return count;
		}

		// sum of all output buffer size
		int gettotalbuffersize()
		{
			int size = 0;
			for (auto& it : args) size += it.buffer_size;
			return size;
		}

		DataStream serialize() {
			int buffer_output_size = gettotalbuffersize();
			int data_size = sizeof(int) + sizeof(ArgumentData) * args.size() + buffer_output_size;

			DataStream serialized(data_size);
			serialized.push<int>(args.size());

			for (auto& arg : args) {
				serialized.push<ArgumentData>(arg);
				if (arg.buffer_size > 0) {
					serialized.push(*(LPVOID*)arg.buf, arg.buffer_size);
				}
			}

			return serialized;
		}

	};


	size_t GetFunctionSize(LPVOID func) {

		// in the memory, function ends with CC CC CC CC padding
		size_t size = 0;
		while (*(DWORD*)((DWORD_PTR)func + size) != 0xCCCCCCCC || *(BYTE*)((DWORD_PTR)func + size + 4) != 0xCC) size++;
		return size;
	}

	LPVOID* InitDummyFunction(LPVOID func) {
		BYTE firstByte = *(BYTE*)func;
		if (firstByte == 0xE9) {
			DWORD relative = *(DWORD*)((DWORD_PTR)func + 1);
			return InitDummyFunction((LPVOID)((DWORD_PTR)func + relative + 5));
		}

		size_t function_size = GetFunctionSize(func);

		// to be able to write to the dummy function
		DWORD oldProtect = 0;
		assert(VirtualProtect(func, function_size, PAGE_EXECUTE_READWRITE, &oldProtect));

		LPVOID result[1000];
		// find all the 1000 push 0x69696969, put them into an array

		for (int i = 0; i < function_size; i++) {
			int index = getPushIndex(*(DWORD*)((DWORD_PTR)func + i));

			if (index != -1) {

				result[index] = (LPVOID)((DWORD_PTR)func + i);
			}
		}
		return result;
	}

	void pushArguments(Arguments args, LPVOID* pushTable) {
		int index = 0;
		for (auto& arg : args.args) {

			if (arg.is64) {
				memcpy(pushTable[index++], arg.buf, 4);
				memcpy(pushTable[index++], &arg.buf[4], 4);
			}
			else {
				memcpy(pushTable[index++], arg.buf, 4);
			}
		}
	}

	int CallFunctionRet32(LPVOID func, Arguments args) {
		static LPVOID* pushTable = InitDummyFunction(callret32);

		pushArguments(args, pushTable);
		return callret32(func);
	}
	

	__int64 CallFunctionRet64(LPVOID func, Arguments args) {
		static LPVOID* pushTable = InitDummyFunction(callret64);
		
		pushArguments(args, pushTable);
		return callret64(func);
	}

	float CallFunctionRetFloat(LPVOID func, Arguments args) {
		static LPVOID* pushTable = InitDummyFunction(callretfloat);

		pushArguments(args, pushTable);
		return callretfloat(func);
	}
	

	double CallFunctionRetDouble(LPVOID func, Arguments args) {
		static LPVOID* pushTable = InitDummyFunction(callretdouble);
		
		pushArguments(args, pushTable);
		return callretdouble(func);
	}

}